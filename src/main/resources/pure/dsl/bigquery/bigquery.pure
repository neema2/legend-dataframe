// Copyright 2025 Neema Raphael
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::dsl::dataframe::*;
import meta::pure::dsl::dataframe::metamodel::*;
import meta::pure::dsl::dataframe::metamodel::column::*;

// Main function to generate BigQuery SQL from a DataFrame
// Helper function to expose feature map for testing
function <<access.private>> meta::pure::dsl::bigquery::generateBigQuerySQL_featureMap(): Map<String, Boolean>[1]
{
   meta::pure::dsl::dataframe::createFeatureSupportMap(
      meta::pure::dsl::dataframe::standardFeatureList()->map(f| 
         if($f.first == 'PIVOT' || $f.first == 'UNPIVOT' || $f.first == 'LATERAL_JOIN' || 
            $f.first == 'QUALIFY' || $f.first == 'STRUCT' || $f.first == 'VALUE' || 
            $f.first == 'EXCEPT' || $f.first == 'REPLACE' || $f.first == 'DIFFERENTIAL_PRIVACY' || 
            $f.first == 'AGGREGATION_THRESHOLD',
            pair($f.first, true),
            $f)
      )
   );
}

function meta::pure::dsl::bigquery::generateBigQuerySQL(df: DataFrame[1]): String[1]
{
   // Check for unsupported features using standardized error handling
   let supportedFeatures = meta::pure::dsl::dataframe::createFeatureSupportMap(
      meta::pure::dsl::dataframe::standardFeatureList()->map(f| 
         if($f.first == 'PIVOT' || $f.first == 'UNPIVOT' || $f.first == 'LATERAL_JOIN' || 
            $f.first == 'QUALIFY' || $f.first == 'STRUCT' || $f.first == 'VALUE' || 
            $f.first == 'EXCEPT' || $f.first == 'REPLACE' || $f.first == 'DIFFERENTIAL_PRIVACY' || 
            $f.first == 'AGGREGATION_THRESHOLD',
            pair($f.first, true),
            $f)
      )
   );
   
   meta::pure::dsl::dataframe::checkUnsupportedFeatures($df, 'BigQuery', $supportedFeatures);
   
   let withClause = $df->generateWithClause();
   $withClause + 
   $df->generateSelectClause() + 
   $df->generateFromClause() + 
   $df->generateWhereClause() + 
   $df->generateGroupByClause() + 
   $df->generateHavingClause() + 
   $df->generateQualifyClause() +  // Add QUALIFY - BigQuery supports this
   $df->generateOrderByClause() + 
   $df->generateLimitOffsetClause()
}

// Generate the WITH clause
function <<access.private>> meta::pure::dsl::bigquery::generateWithClause(df: DataFrame[1]): String[1]
{
   if($df.ctes->isEmpty(), 
      '', 
      'WITH ' + $df.ctes->map(cte | 
         if($cte.isRecursive, 
            'RECURSIVE ', 
            '') + 
         $cte.name + ' AS (' + 
         if($cte.query->instanceOf(DataFrame), 
            meta::pure::dsl::bigquery::generateBigQuerySQL($cte.query->cast(@DataFrame)), 
            $cte.query->cast(@String)) + 
         ')'
      )->joinStrings(',\n') + '\n');
}

// Generate the SELECT clause
function <<access.private>> meta::pure::dsl::bigquery::generateSelectClause(df: DataFrame[1]): String[1]
{
   let structPrefix = if($df.structOutput == true, 'AS STRUCT ', '');
   let valuePrefix = if($df.valueOutput == true, 'AS VALUE ', '');
   let prefix = $structPrefix + $valuePrefix;
   
   let exceptClause = if($df.exceptColumns->isEmpty(), 
                         '', 
                         ' EXCEPT (' + $df.exceptColumns->joinStrings(', ') + ')');
   
   let replaceClause = if($df.replaceColumns->isEmpty(), 
                           '', 
                           ' REPLACE (' + $df.replaceColumns->keyValues()->map(kv | 
                                               $kv.first + ' AS ' + $kv.second->generateBigQueryExpression()
                                            )->joinStrings(', ') + ')');
   
   'SELECT ' + if($df.distinct == true, 'DISTINCT ', '') + $prefix + 
   if($df.columns->isEmpty(), 
      '*' + $exceptClause + $replaceClause, 
      $df.columns->map(c | $c.expression->generateBigQueryExpression() + if($c.alias->isNotEmpty(), ' AS ' + $c.alias->toOne(), ''))->joinStrings(', '));
}

// Generate the FROM clause
function <<access.private>> meta::pure::dsl::bigquery::generateFromClause(df: DataFrame[1]): String[1]
{
   if($df.source->isEmpty(), 
      '', 
      '\nFROM ' + $df.source->toOne()->generateBigQueryDataSource());
}

// Generate the WHERE clause
function <<access.private>> meta::pure::dsl::bigquery::generateWhereClause(df: DataFrame[1]): String[1]
{
   if($df.filter->isEmpty(), 
      '', 
      '\nWHERE ' + $df.filter->toOne()->generateBigQueryExpression());
}

// Generate the GROUP BY clause
function <<access.private>> meta::pure::dsl::bigquery::generateGroupByClause(df: DataFrame[1]): String[1]
{
   if($df.groupBy->isEmpty() || $df.groupBy.columns->isEmpty(), 
      '', 
      '\nGROUP BY ' + 
      if($df.groupBy.type == GroupByType.STANDARD,
         $df.groupBy.columns->match([
            c: ColSpec<Any>[1] | $c.name,
            c: ColSpecArray<Any>[1] | $c.names->joinStrings(', '),
            _: Expression[*] | $df.groupBy.columns->map(c | $c->generateBigQueryExpression())->joinStrings(', ')
         ]),
         if($df.groupBy.type == GroupByType.CUBE,
            'CUBE(' + $df.groupBy.columns->map(c | $c->generateBigQueryExpression())->joinStrings(', ') + ')',
            if($df.groupBy.type == GroupByType.ROLLUP,
               'ROLLUP(' + $df.groupBy.columns->map(c | $c->generateBigQueryExpression())->joinStrings(', ') + ')',
               // GROUPING SETS
               'GROUPING SETS(' + $df.groupBy.groupingSets->map(gs | 
                  '(' + $gs->map(c | $c->generateBigQueryExpression())->joinStrings(', ') + ')'
               )->joinStrings(', ') + ')'
            )
         )
      )
   );
}

// Generate the HAVING clause
function <<access.private>> meta::pure::dsl::bigquery::generateHavingClause(df: DataFrame[1]): String[1]
{
   if($df.having->isEmpty(), 
      '', 
      '\nHAVING ' + $df.having->toOne()->generateBigQueryExpression());
}

// Generate the ORDER BY clause
function <<access.private>> meta::pure::dsl::bigquery::generateOrderByClause(df: DataFrame[1]): String[1]
{
   if($df.orderBy->isEmpty(), 
      '', 
      '\nORDER BY ' + $df.orderBy->map(o | 
         $o.column->generateBigQueryExpression() + 
         if($o.direction == SortDirection.ASC, '', ' DESC') + 
         if($o.nulls == NullsOrder.FIRST, ' NULLS FIRST', if($o.nulls == NullsOrder.LAST, ' NULLS LAST', ''))
      )->joinStrings(', '));
}

// Generate the LIMIT and OFFSET clauses plus BigQuery-specific privacy clauses
function <<access.private>> meta::pure::dsl::bigquery::generateLimitOffsetClause(df: DataFrame[1]): String[1]
{
   let limitClause = if($df.limit->isEmpty(), '', '\nLIMIT ' + $df.limit->toOne()->toString());
   let offsetClause = if($df.offset->isEmpty(), '', '\nOFFSET ' + $df.offset->toOne()->toString());
   let diffPrivacyClause = $df->generateDifferentialPrivacyClause();
   let aggThresholdClause = $df->generateAggregationThresholdClause();
   
   $limitClause + $offsetClause + $diffPrivacyClause + $aggThresholdClause;
}

// Generate the WITH DIFFERENTIAL_PRIVACY clause
function <<access.private>> meta::pure::dsl::bigquery::generateDifferentialPrivacyClause(df: DataFrame[1]): String[1]
{
   if($df.differentialPrivacy->isEmpty(), 
      '', 
      '\nWITH DIFFERENTIAL_PRIVACY OPTIONS(' + 
         'epsilon=' + $df.differentialPrivacy->toOne().epsilon->toString() + 
         if($df.differentialPrivacy->toOne().delta->isNotEmpty(), 
            ', delta=' + $df.differentialPrivacy->toOne().delta->toOne()->toString(), 
            '') +
         if($df.differentialPrivacy->toOne().kappa->isNotEmpty(), 
            ', kappa=' + $df.differentialPrivacy->toOne().kappa->toOne()->toString(), 
            '') +
         if($df.differentialPrivacy->toOne().sensitivityType->isNotEmpty(), 
            ', sensitivity_type=' + $df.differentialPrivacy->toOne().sensitivityType->toOne()->toString() + 
            ', sensitivity_value=' + $df.differentialPrivacy->toOne().sensitivityValue->toOne()->toString(), 
            '') +
      ')')
}

// Generate the WITH AGGREGATION_THRESHOLD clause
function <<access.private>> meta::pure::dsl::bigquery::generateAggregationThresholdClause(df: DataFrame[1]): String[1]
{
   if($df.aggregationThreshold->isEmpty(), 
      '', 
      '\nWITH AGGREGATION_THRESHOLD ' + $df.aggregationThreshold->toOne().threshold->toString() +
      if($df.aggregationThreshold->toOne().replaceWith->isNotEmpty(), 
         ' REPLACE WITH ' + generateBigQueryLiteral($df.aggregationThreshold->toOne().replaceWith->toOne()), 
         ''))
}

// Generate BigQuery expression for a column
function <<access.private>> meta::pure::dsl::bigquery::generateBigQueryExpression(column: Column[1]): String[1]
{
   $column->match([
      c: ColumnReference[1] | $c.colSpec.name,
      c: LiteralColumn[1] | generateBigQueryLiteral($c.value),
      c: FunctionColumn[1] | generateBigQueryFunction($c),
      c: CaseColumn[1] | generateBigQueryCase($c),
      c: WindowFunction[1] | generateBigQueryWindowFunction($c),
      c: SubqueryColumn[1] | '(' + meta::pure::dsl::bigquery::generateBigQuerySQL($c.query) + ')',
      c: PivotColumn[1] | generateBigQueryPivot($c),
      c: UnpivotColumn[1] | generateBigQueryUnpivot($c),
      c: ScalarFunction[1] | meta::pure::dsl::dataframe::generateScalarFunctionSQL($c, Database.BIGQUERY, {e | generateBigQueryExpression($e)})
   ]);
}

// Generate BigQuery literal
function <<access.private>> meta::pure::dsl::bigquery::generateBigQueryLiteral(value: Any[1]): String[1]
{
   $value->match([
      s: String[1] | '\'' + $s->replace('\'', '\'\'') + '\'',
      i: Integer[1] | $i->toString(),
      f: Float[1] | $f->toString(),
      d: Decimal[1] | $d->toString(),
      b: Boolean[1] | if($b, 'TRUE', 'FALSE'),
      d: Date[1] | 'DATE \'' + $d->toString() + '\'',
      t: DateTime[1] | 'TIMESTAMP \'' + $t->toString() + '\'',
      n: Nil[1] | 'NULL',
      a: Any[1] | '\'' + $a->toString() + '\''
   ]);
}

// Generate BigQuery function
function <<access.private>> meta::pure::dsl::bigquery::generateBigQueryFunction(func: FunctionColumn[1]): String[1]
{
   $func.name + '(' + $func.arguments->map(arg | $arg->generateBigQueryExpression())->joinStrings(', ') + ')';
}

// Generate BigQuery CASE expression
function <<access.private>> meta::pure::dsl::bigquery::generateBigQueryCase(caseCol: CaseColumn[1]): String[1]
{
   'CASE ' + 
   if($caseCol.condition->isEmpty(), 
      '', 
      $caseCol.condition->toOne()->generateBigQueryExpression() + ' ') + 
   $caseCol.whenClauses->map(wc | 
      'WHEN ' + $wc.condition->generateBigQueryExpression() + 
      ' THEN ' + $wc.result->generateBigQueryExpression()
   )->joinStrings(' ') + 
   if($caseCol.elseResult->isEmpty(), 
      '', 
      ' ELSE ' + $caseCol.elseResult->toOne()->generateBigQueryExpression()) + 
   ' END';
}


// Generate BigQuery PIVOT
function <<access.private>> meta::pure::dsl::bigquery::generateBigQueryPivot(pivot: PivotColumn[1]): String[1]
{
   'PIVOT(' + 
   $pivot.aggregateFunction->generateBigQueryExpression() + 
   ' FOR ' + $pivot.pivotColumn->generateBigQueryExpression() + 
   ' IN (' + $pivot.pivotValues->map(v | $v->generateBigQueryExpression())->joinStrings(', ') + ')' + 
   ')';
}

// Generate BigQuery UNPIVOT
function <<access.private>> meta::pure::dsl::bigquery::generateBigQueryUnpivot(unpivot: UnpivotColumn[1]): String[1]
{
   'UNPIVOT(' + 
   if($unpivot.includeNulls, 'INCLUDE NULLS ', '') + 
   $unpivot.valueColumn + ' FOR ' + $unpivot.nameColumn + 
   ' IN (' + $unpivot.columns->map(c | $c->generateBigQueryExpression())->joinStrings(', ') + ')' + 
   ')';
}

// Generate SQL for AggColSpecArray
function <<access.private>> meta::pure::dsl::bigquery::generateSQLFromAggColSpecArray<K, V, R>(aggColSpecs: AggColSpecArray<K, V, R>[1]): String[1]
{
   $aggColSpecs.specs->map(s | generateSQLFromAggColSpec($s))->joinStrings(', ');
}

// Generate SQL for AggColSpec
function <<access.private>> meta::pure::dsl::bigquery::generateSQLFromAggColSpec<K, V, R>(aggColSpec: AggColSpec<K, V, R>[1]): String[1]
{
   let funcName = if($aggColSpec.name->startsWith('sum_'), 'SUM',
                  if($aggColSpec.name->startsWith('avg_'), 'AVG',
                  if($aggColSpec.name->startsWith('min_'), 'MIN',
                  if($aggColSpec.name->startsWith('max_'), 'MAX',
                  if($aggColSpec.name->startsWith('count_'), 'COUNT', 'UNKNOWN')))));
   
   let colName = $aggColSpec.name->substring($aggColSpec.name->indexOf('_') + 1, $aggColSpec.name->length());
   
   $funcName + '(' + $colName + ')';
}

// Generate SQL for GroupByOperation
function <<access.private>> meta::pure::dsl::bigquery::generateBigQueryGroupBy(op: GroupByOperation[1]): String[1]
{
   let columnsStr = $op.columns->match([
      c: ColSpec<Any>[1] | $c.name,
      c: ColSpecArray<Any>[1] | $c.names->joinStrings(', '),
      _: Expression[*] | $op.columns->map(c | $c->generateBigQueryExpression())->joinStrings(', ')
   ]);

   let aggregationsStr = $op.aggregations->match([
      a: AggColSpec<Any, Any, Any>[1] | $a.name + ' = ' + generateBigQueryAggregation($a),
      a: AggColSpecArray<Any, Any, Any>[1] | $a.specs->map(s | $s.name + ' = ' + generateBigQueryAggregation($s))->joinStrings(', '),
      _: Expression[*] | $op.aggregations->map(a | $a->generateBigQueryExpression())->joinStrings(', ')
   ]);

   let selectClause = if($columnsStr->isEmpty(), 
                        $aggregationsStr, 
                        $columnsStr + if($aggregationsStr->isEmpty(), '', ', ' + $aggregationsStr));

   'SELECT ' + $selectClause + ' ' +
   'FROM (' + $op.source->generateBigQuerySQL() + ') AS _inner_subquery ' +
   'GROUP BY ' + $columnsStr;
}

// Helper function to generate SQL for AggColSpec
function <<access.private>> meta::pure::dsl::bigquery::generateBigQueryAggregation(agg: AggColSpec<Any, Any, Any>[1]): String[1]
{
   if($agg.functionExpression->isNotEmpty(),
      | $agg.functionExpression->toOne()->generateBigQueryFunction(),
      | {
         // Legacy fallback using naming convention
         let funcName = if($agg.name->startsWith('sum_'), 'SUM',
                        if($agg.name->startsWith('avg_'), 'AVG',
                        if($agg.name->startsWith('min_'), 'MIN',
                        if($agg.name->startsWith('max_'), 'MAX',
                        if($agg.name->startsWith('count_'), 'COUNT', 'UNKNOWN')))));
         
         let colName = $agg.name->substring($agg.name->indexOf('_') + 1, $agg.name->length());
         
         $funcName + '(' + $colName + ')';
      }->eval()
   );
}

// Generate BigQuery window function with WindowFunction parameter
function <<access.private>> meta::pure::dsl::bigquery::generateBigQueryWindowFunction(func: WindowFunction[1]): String[1]
{
   meta::pure::dsl::dataframe::generateWindowFunctionSQL($func, {e | generateBigQueryExpression($e)}, {w | generateBigQueryWindowSpec($w)});
}

// Generate SQL for window specifications
function <<access.private>> meta::pure::dsl::bigquery::generateBigQueryWindowSpec(windowSpec: Window[1]): String[1]
{
   meta::pure::dsl::dataframe::generateWindowSpecSQL($windowSpec, {e | generateBigQueryExpression($e)});
}



// Generate SQL for window frames
function <<access.private>> meta::pure::dsl::bigquery::generateFrameSQL(frame: Frame[1]): String[1]
{
   // Use central implementation
   meta::pure::dsl::dataframe::generateFrameSQL($frame);
}

// Generate SQL for frame values
function <<access.private>> meta::pure::dsl::bigquery::generateFrameValueSQL(frameValue: FrameValue[1]): String[1]
{
   // Use central implementation
   meta::pure::dsl::dataframe::generateFrameValueSQL($frameValue);
}

// Generate SQL for a data source
function <<access.private>> meta::pure::dsl::bigquery::generateBigQueryDataSource(source: DataSource[1]): String[1]
{
   $source->match([
      t: TableReference[1] | 
         if($t.tableName == 'inline_tds' && $t.inlineTDSData->isNotEmpty(),
            | '(SELECT ' + $t.inlineTDSData->toOne().columns->joinStrings(', ') + ' FROM UNNEST(ARRAY[' + 
              $t.inlineTDSData->toOne().rows->map(row | 
                 'STRUCT(' + $row->map(cell | generateBigQueryLiteral($cell))->joinStrings(', ') + ')'
               )->joinStrings(', ') + '])' + 
               if($t.alias->isNotEmpty(), ' AS ' + $t.alias->toOne(), ''),
            | if($t.schema->isNotEmpty(), $t.schema->toOne() + '.', '') + $t.tableName + if($t.alias->isNotEmpty(), ' AS ' + $t.alias->toOne(), '')
         ),
      j: JoinOperation[1] | 
         let joinType = $j.joinType->generateBigQueryJoinType();
         let joinCondition = if($j.usingColumns->isNotEmpty(),
                                'USING (' + $j.usingColumns->joinStrings(', ') + ')',
                                'ON ' + $j.condition->generateBigQueryExpression());
         $j.left->generateBigQueryDataSource() + ' ' + $joinType + ' ' + $j.right->generateBigQueryDataSource() + ' ' + $joinCondition,
      l: LateralJoin[1] | $l.left->generateBigQueryDataSource() + ' ' + $l.joinType->generateBigQueryJoinType() + ' LATERAL ' + $l.right->generateBigQueryDataSource() + ' ON ' + $l.condition->generateBigQueryExpression(),
      s: SubquerySource[1] | '(' + $s.dataFrame->generateBigQuerySQL() + ') AS ' + $s.alias,
      d: DataSource[1] | 'UNKNOWN_SOURCE_TYPE'
   ])
}

// Generate SQL for join types
function <<access.private>> meta::pure::dsl::bigquery::generateBigQueryJoinType(joinType: JoinType[1]): String[1]
{
   $joinType->match([
      JoinType.INNER | 'INNER JOIN',
      JoinType.LEFT_OUTER | 'LEFT JOIN',
      JoinType.RIGHT_OUTER | 'RIGHT JOIN',
      JoinType.FULL_OUTER | 'FULL JOIN',
      JoinType.CROSS | 'CROSS JOIN'
   ])
}

// Generate BigQuery PIVOT source
function <<access.private>> meta::pure::dsl::bigquery::generateBigQueryPivotSource(pivot: PivotSource[1]): String[1]
{
   $pivot.source->generateBigQuerySource() + 
   ' PIVOT(' + 
   $pivot.aggregateFunction->generateBigQueryExpression() + 
   ' FOR ' + $pivot.pivotColumn->generateBigQueryExpression() + 
   ' IN (' + $pivot.pivotValues->map(v | $v->generateBigQueryExpression() + if($v.alias->isEmpty(), '', ' AS ' + $v.alias->toOne()))->joinStrings(', ') + ')' + 
   ')' + if($pivot.alias->isEmpty(), '', ' AS ' + $pivot.alias->toOne());
}

// Generate BigQuery UNPIVOT source
function <<access.private>> meta::pure::dsl::bigquery::generateBigQueryUnpivotSource(unpivot: UnpivotSource[1]): String[1]
{
   $unpivot.source->generateBigQuerySource() + 
   ' UNPIVOT(' + 
   if($unpivot.includeNulls, 'INCLUDE NULLS ', '') + 
   $unpivot.valueColumn + ' FOR ' + $unpivot.nameColumn + 
   ' IN (' + $unpivot.columns->map(c | $c->generateBigQueryExpression() + if($c.alias->isEmpty(), '', ' AS ' + $c.alias->toOne()))->joinStrings(', ') + ')' + 
   ')' + if($unpivot.alias->isEmpty(), '', ' AS ' + $unpivot.alias->toOne());
}

// Generate BigQuery LATERAL JOIN
function <<access.private>> meta::pure::dsl::bigquery::generateBigQueryLateralJoin(lateral: LateralJoinSource[1]): String[1]
{
   $lateral.left->generateBigQuerySource() + 
   ' ' + $lateral.type->toString() + ' JOIN ' + 
   'LATERAL (' + meta::pure::dsl::bigquery::generateBigQuerySQL($lateral.right) + ')' + 
   if($lateral.alias->isEmpty(), '', ' AS ' + $lateral.alias->toOne()) + 
   if($lateral.condition->isEmpty(), 
      '', 
      ' ON ' + $lateral.condition->toOne()->generateBigQueryExpression());
}

// toSQL function moved to dataframe.pure
// Type-safe functions have been moved to dataframe.pure
