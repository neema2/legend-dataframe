// Copyright 2025 Neema Raphael
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::dsl::dataframe::*;
import meta::pure::dsl::dataframe::metamodel::*;
import meta::pure::dsl::dataframe::metamodel::scalar::*;

/**
 * Implementation of scalar functions for DataFrame DSL
 */

// Registry of scalar function implementations
native function meta::pure::dsl::dataframe::scalarFunctionRegistry(): Map<String, ScalarFunctionImplementation>[1];

// Initialize the scalar function registry with common functions
function meta::pure::dsl::dataframe::initializeScalarFunctionRegistry(): Map<String, ScalarFunctionImplementation>[1]
{
   let registry = newMap([]);
   
   // Math functions
   $registry->put('abs', ^ScalarFunctionImplementation(
      standardName = 'ABS',
      databases = newMap([
         pair(Database.SNOWFLAKE, 'ABS'),
         pair(Database.DUCKDB, 'ABS'),
         pair(Database.BIGQUERY, 'ABS'),
         pair(Database.DATABRICKS, 'ABS'),
         pair(Database.REDSHIFT, 'ABS'),
         pair(Database.POSTGRES, 'ABS')
      ])
   ));
   
   $registry->put('cos', ^ScalarFunctionImplementation(
      standardName = 'COS',
      databases = newMap([
         pair(Database.SNOWFLAKE, 'COS'),
         pair(Database.DUCKDB, 'COS'),
         pair(Database.BIGQUERY, 'COS'),
         pair(Database.DATABRICKS, 'COS'),
         pair(Database.REDSHIFT, 'COS'),
         pair(Database.POSTGRES, 'COS')
      ])
   ));
   
   // Date functions with identical syntax
   $registry->put('date_part', ^ScalarFunctionImplementation(
      standardName = 'DATE_PART',
      databases = newMap([
         pair(Database.SNOWFLAKE, 'DATE_PART'),
         pair(Database.DUCKDB, 'DATE_PART'),
         pair(Database.BIGQUERY, 'EXTRACT'),
         pair(Database.DATABRICKS, 'DATE_PART'),
         pair(Database.REDSHIFT, 'DATE_PART'),
         pair(Database.POSTGRES, 'DATE_PART')
      ])
   ));
   
   // Date difference function with varying syntax
   $registry->put('datediff', ^ScalarFunctionImplementation(
      standardName = 'DATEDIFF',
      databases = newMap([
         pair(Database.SNOWFLAKE, 'DATEDIFF'),
         pair(Database.DUCKDB, 'DATEDIFF'),
         pair(Database.BIGQUERY, 'DATE_DIFF'),
         pair(Database.DATABRICKS, 'DATEDIFF'),
         pair(Database.REDSHIFT, 'DATEDIFF'),
         pair(Database.POSTGRES, 'DATE_PART')
      ]),
      parameterTransformations = newMap([
         // For Postgres, transform parameters to use DATE_PART with subtraction
         pair(Database.POSTGRES, {params: Expression[*] | 
            if($params->size() >= 3,
               [
                  ^LiteralExpression(value = 'day'),
                  ^BinaryOperation(
                     left = $params->at(2), 
                     operator = BinaryOperator.SUBTRACT, 
                     right = $params->at(1)
                  )
               ],
               $params
            )
         })
      ])
   ));
   
   $registry;
}

// Standard scalar function generator
function meta::pure::dsl::dataframe::generateScalarFunctionSQL(func: ScalarFunction[1], database: Database[1], expressionGenerator: Function<{Expression[1]->String[1]}>[1]): String[1]
{
   $func->match([
      c: CommonScalarFunction[1] | 
         let implementation = $c.implementation;
         let functionName = $implementation.databases->get($database)->defaultIfEmpty($implementation.standardName);
         let params = if($implementation.parameterTransformations->isNotEmpty() && $implementation.parameterTransformations->toOne()->containsKey($database),
                       |$implementation.parameterTransformations->toOne()->get($database)->toOne()->eval($c.parameters),
                       |$c.parameters);
         
         $functionName + '(' + $params->map(p | $expressionGenerator->eval($p))->joinStrings(', ') + ')',
         
      d: DatabaseSpecificFunction[1] | 
         if($d.implementations->containsKey($database),
            |$d.implementations->get($database)->toOne() + '(' + $d.parameters->map(p | $expressionGenerator->eval($p))->joinStrings(', ') + ')',
            |fail('Function ' + $d.functionName + ' is not supported in ' + $database->toString());
            ''
         ),
         
      s: ScalarFunction[1] | $s.functionName + '(' + $s.parameters->map(p | $expressionGenerator->eval($p))->joinStrings(', ') + ')'
   ]);
}

// Factory functions for creating scalar functions
function meta::pure::dsl::dataframe::abs(expr: Expression[1]): ScalarFunction[1]
{
   ^CommonScalarFunction(
      functionName = 'abs',
      parameters = [$expr],
      implementation = scalarFunctionRegistry()->get('abs')->toOne()
   );
}

function meta::pure::dsl::dataframe::cos(expr: Expression[1]): ScalarFunction[1]
{
   ^CommonScalarFunction(
      functionName = 'cos',
      parameters = [$expr],
      implementation = scalarFunctionRegistry()->get('cos')->toOne()
   );
}

function meta::pure::dsl::dataframe::datediff(datepart: Expression[1], startdate: Expression[1], enddate: Expression[1]): ScalarFunction[1]
{
   ^CommonScalarFunction(
      functionName = 'datediff',
      parameters = [$datepart, $startdate, $enddate],
      implementation = scalarFunctionRegistry()->get('datediff')->toOne()
   );
}
