// Copyright 2025 Neema Raphael
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::dsl::dataframe::*;
import meta::pure::dsl::dataframe::metamodel::*;

// Standard error handling for database-specific features
function meta::pure::dsl::dataframe::checkUnsupportedFeatures(df: DataFrame[1], database: String[1], supportedFeatures: Map<String, Boolean>[1]): Nil[0]
{
   // Check PIVOT support
   if($df.pivot->isNotEmpty() && !$supportedFeatures->get('PIVOT')->defaultIfEmpty(false), 
      | throw('PIVOT clause is not supported in ' + $database, []));
   
   // Check UNPIVOT support
   if($df.unpivot->isNotEmpty() && !$supportedFeatures->get('UNPIVOT')->defaultIfEmpty(false), 
      | throw('UNPIVOT clause is not supported in ' + $database, []));
   
   // Check MATCH_RECOGNIZE support
   if($df.matchRecognize->isNotEmpty() && !$supportedFeatures->get('MATCH_RECOGNIZE')->defaultIfEmpty(false), 
      | throw('MATCH_RECOGNIZE clause is not supported in ' + $database, []));
   
   // Check LATERAL JOIN support
   if($df.source->instanceOf(LateralJoin) && !$supportedFeatures->get('LATERAL_JOIN')->defaultIfEmpty(false), 
      | throw('LATERAL join is not supported in ' + $database, []));
   
   // Check AT support
   if($df.at->isNotEmpty() && !$supportedFeatures->get('AT')->defaultIfEmpty(false), 
      | throw('AT clause is not supported in ' + $database, []));
   
   // Check CHANGES support
   if($df.changes->isNotEmpty() && !$supportedFeatures->get('CHANGES')->defaultIfEmpty(false), 
      | throw('CHANGES clause is not supported in ' + $database, []));
   
   // Check CONNECT BY support
   if($df.connectBy->isNotEmpty() && !$supportedFeatures->get('CONNECT_BY')->defaultIfEmpty(false), 
      | throw('CONNECT BY clause is not supported in ' + $database, []));
   
   // Check SAMPLE support
   if($df.sample->isNotEmpty() && !$supportedFeatures->get('SAMPLE')->defaultIfEmpty(false), 
      | throw('SAMPLE clause is not supported in ' + $database, []));
   
   // Check QUALIFY support
   if($df.qualify->isNotEmpty() && !$supportedFeatures->get('QUALIFY')->defaultIfEmpty(false), 
      | throw('QUALIFY clause is not supported in ' + $database, []));
   
   // Check STRUCT output support
   if($df.structOutput == true && !$supportedFeatures->get('STRUCT')->defaultIfEmpty(false), 
      | throw('SELECT AS STRUCT is not supported in ' + $database, []));
   
   // Check VALUE output support
   if($df.valueOutput == true && !$supportedFeatures->get('VALUE')->defaultIfEmpty(false), 
      | throw('SELECT AS VALUE is not supported in ' + $database, []));
   
   // Check EXCEPT support
   if($df.exceptColumns->isNotEmpty() && !$supportedFeatures->get('EXCEPT')->defaultIfEmpty(false), 
      | throw('SELECT * EXCEPT is not supported in ' + $database, []));
   
   // Check REPLACE support
   if($df.replaceColumns->isNotEmpty() && !$supportedFeatures->get('REPLACE')->defaultIfEmpty(false), 
      | throw('SELECT * REPLACE is not supported in ' + $database, []));
   
   // Check DIFFERENTIAL_PRIVACY support
   if($df.differentialPrivacy->isNotEmpty() && !$supportedFeatures->get('DIFFERENTIAL_PRIVACY')->defaultIfEmpty(false), 
      | throw('WITH DIFFERENTIAL_PRIVACY is not supported in ' + $database, []));
   
   // Check AGGREGATION_THRESHOLD support
   if($df.aggregationThreshold->isNotEmpty() && !$supportedFeatures->get('AGGREGATION_THRESHOLD')->defaultIfEmpty(false), 
      | throw('WITH AGGREGATION_THRESHOLD is not supported in ' + $database, []));
}

// Helper function to create feature support map
function meta::pure::dsl::dataframe::createFeatureSupportMap(features: Pair<String, Boolean>[*]): Map<String, Boolean>[1]
{
   newMap($features);
}
