// Copyright 2025 Neema Raphael
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::dsl::dataframe::*;
import meta::pure::dsl::dataframe::metamodel::*;

function <<meta::pure::profiles::test.Test>> {meta.pure.profiles.test.AlloyOnly} meta::pure::dsl::tests::testFeatureSupportConsistency(): Boolean[1]
{
   // Get the standard feature list
   let standardFeatures = meta::pure::dsl::dataframe::standardFeatureList()->map(f| $f.first);
   
   // Verify that each database implementation includes all standard features
   let snowflakeFeatures = meta::pure::dsl::snowflake::generateSnowflakeSQL_featureMap();
   let redshiftFeatures = meta::pure::dsl::redshift::generateRedshiftSQL_featureMap();
   let bigqueryFeatures = meta::pure::dsl::bigquery::generateBigQuerySQL_featureMap();
   let duckdbFeatures = meta::pure::dsl::duckdb::generateDuckDBSQL_featureMap();
   let postgresFeatures = meta::pure::dsl::postgres::generatePostgresSQL_featureMap();
   
   // Check that all standard features are included in each implementation
   assertEquals($standardFeatures->size(), $snowflakeFeatures->keys()->size());
   assertEquals($standardFeatures->size(), $redshiftFeatures->keys()->size());
   assertEquals($standardFeatures->size(), $bigqueryFeatures->keys()->size());
   assertEquals($standardFeatures->size(), $duckdbFeatures->keys()->size());
   assertEquals($standardFeatures->size(), $postgresFeatures->keys()->size());
   
   true;
}
