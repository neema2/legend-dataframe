// Copyright 2025 Neema Raphael
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::dsl::dataframe::*;
import meta::pure::dsl::dataframe::metamodel::*;
import meta::pure::dsl::bigquery::*;

// Helper function to get inline TDS values
function meta::pure::dsl::bigquery::getInlineTDSValues(df: DataFrame[1]): String[1]
{
   meta::pure::dsl::dataframe::getInlineTDSValues($df);
}

// Helper function to handle inline TDS in BigQuery SQL generation
function meta::pure::dsl::bigquery::handleInlineTDS(df: DataFrame[1]): String[1]
{
   if($df.source->instanceOf(TableReference) && $df.source->cast(@TableReference).tableName == 'inline_tds',
      | let tdsData = $df.source->cast(@TableReference).inlineTDSData;
        if($tdsData->isEmpty(),
           | 'ERROR: No inline TDS data found',
           | '(SELECT ' + $tdsData->toOne().columns->joinStrings(', ') + ' FROM UNNEST(ARRAY[' + 
             $tdsData->toOne().rows->map(row | 
                'STRUCT(' + $row->map(cell | generateBigQueryLiteral($cell))->joinStrings(', ') + ')'
              )->joinStrings(', ') + '])' + 
              if($df.source->cast(@TableReference).alias->isNotEmpty(), ' AS ' + $df.source->cast(@TableReference).alias->toOne(), '')
        );,
      | 'ERROR: Not an inline TDS'
   );
}
