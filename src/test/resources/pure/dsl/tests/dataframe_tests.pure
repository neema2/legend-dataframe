// Copyright 2025 Neema Raphael
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::dsl::dataframe::*;
import meta::pure::dsl::dataframe::metamodel::*;
import meta::pure::dsl::snowflake::*;
import meta::pure::dsl::duckdb::*;
import meta::pure::dsl::bigquery::*;
import meta::pure::dsl::databricks::*;
import meta::pure::dsl::tests::*;

/**
 * Tests for the DataFrame DSL and SQL generators
 */

function <<test.Test>> meta::pure::dsl::tests::testSimpleSelect(): Boolean[1]
{
   // Create a simple SELECT query
   let df = select([
      as(~id, 'id'),
      as(~name, 'name')
   ])->from(table('customers'));
   
   // Generate SQL for Snowflake
   let snowflakeSQL = $df->generateSnowflakeSQL();
   assertEquals('SELECT id AS id, name AS name\nFROM customers', $snowflakeSQL);
   
   // Generate SQL for DuckDB
   let duckdbSQL = $df->generateDuckDBSQL();
   assertEquals('SELECT id AS id, name AS name\nFROM customers', $duckdbSQL);
   
   true;
}

function <<test.Test>> meta::pure::dsl::tests::testSelectWithFilter(): Boolean[1]
{
   // Create a SELECT query with filter using Pure built-ins
   let df = select([
      as(~id, 'id'),
      as(~name, 'name')
   ])->from(table('customers'))->filter({x | $x.id == 100});
   
   // Generate SQL for Snowflake
   let snowflakeSQL = $df->generateSnowflakeSQL();
   assertEquals('SELECT id AS id, name AS name\nFROM customers\nWHERE (id = 100)', $snowflakeSQL);
   
   // Generate SQL for DuckDB
   let duckdbSQL = $df->generateDuckDBSQL();
   assertEquals('SELECT id AS id, name AS name\nFROM customers\nWHERE (id = 100)', $duckdbSQL);
   
   true;
}

function <<test.Test>> meta::pure::dsl::tests::testSelectWithJoin(): Boolean[1]
{
   // Create a SELECT query with JOIN
   let df = select([
      as(~('c', 'id'), 'customer_id'),
      as(~('c', 'name'), 'customer_name'),
      as(~('o', 'id'), 'order_id')
   ])->from(
      join(
         tableAs('customers', 'c'),
         tableAs('orders', 'o'),
         {c, o | $c.id == $o.customer_id}
      )
   );
   
   // Generate SQL for Snowflake
   let snowflakeSQL = $df->generateSnowflakeSQL();
   assertEquals('SELECT c.id AS customer_id, c.name AS customer_name, o.id AS order_id\nFROM customers AS c INNER JOIN orders AS o ON (c.id = o.customer_id)', $snowflakeSQL);
   
   // Generate SQL for DuckDB
   let duckdbSQL = $df->generateDuckDBSQL();
   assertEquals('SELECT c.id AS customer_id, c.name AS customer_name, o.id AS order_id\nFROM customers AS c INNER JOIN orders AS o ON (c.id = o.customer_id)', $duckdbSQL);
   
   true;
}

function <<test.Test>> meta::pure::dsl::tests::testSelectWithGroupBy(): Boolean[1]
{
   // Create a SELECT query with GROUP BY and aggregate functions
   let df = select([
      as(~category, 'category')
   ])->from(table('orders'))->groupBy(~category, ~[
      count : x | $x.id : y | $y->size(),
      total_amount : x | $x.amount : y | $y->sum()
   ]);
   
   // Generate SQL for Snowflake
   let snowflakeSQL = $df->generateSnowflakeSQL();
   assertEquals('SELECT category AS category, COUNT(id) AS count, SUM(amount) AS total_amount\nFROM orders\nGROUP BY category', $snowflakeSQL);
   
   // Generate SQL for DuckDB
   let duckdbSQL = $df->generateDuckDBSQL();
   assertEquals('SELECT category AS category, COUNT(id) AS count, SUM(amount) AS total_amount\nFROM orders\nGROUP BY category', $duckdbSQL);
   
   true;
}

function <<test.Test>> meta::pure::dsl::tests::testSelectWithOrderBy(): Boolean[1]
{
   // Create a SELECT query with ORDER BY
   let df = select([
      as(~id, 'id'),
      as(~name, 'name')
   ])->from(table('customers'))->orderBy([asc(~name), desc(~id)]);
   
   // Generate SQL for Snowflake
   let snowflakeSQL = $df->generateSnowflakeSQL();
   assertEquals('SELECT id AS id, name AS name\nFROM customers\nORDER BY name ASC, id DESC', $snowflakeSQL);
   
   // Generate SQL for DuckDB
   let duckdbSQL = $df->generateDuckDBSQL();
   assertEquals('SELECT id AS id, name AS name\nFROM customers\nORDER BY name ASC, id DESC', $duckdbSQL);
   
   true;
}

function <<test.Test>> meta::pure::dsl::tests::testSelectWithLimit(): Boolean[1]
{
   // Create a SELECT query with LIMIT and OFFSET
   let df = select([
      as(~id, 'id'),
      as(~name, 'name')
   ])->from(table('customers'))->limit(10)->offset(20);
   
   // Generate SQL for Snowflake
   let snowflakeSQL = $df->generateSnowflakeSQL();
   assertEquals('SELECT id AS id, name AS name\nFROM customers\nLIMIT 10\nOFFSET 20', $snowflakeSQL);
   
   // Generate SQL for DuckDB
   let duckdbSQL = $df->generateDuckDBSQL();
   assertEquals('SELECT id AS id, name AS name\nFROM customers\nLIMIT 10\nOFFSET 20', $duckdbSQL);
   
   true;
}

function <<test.Test>> meta::pure::dsl::tests::testComplexQuery(): Boolean[1]
{
   // Create a complex SELECT query with multiple features
   let df = selectDistinct([
      as(~('c', 'category'), 'category'),
      as(count(~('o', 'id')), 'order_count'),
      as(sum(~('o', 'amount')), 'total_amount')
   ])->from(
      leftJoin(
         tableAs('categories', 'c'),
         tableAs('orders', 'o'),
         {c, o | $c.id == $o.category_id}
      )
   )->filter({x | $x.o.amount > 100 && $x.o.customer_id != null})->groupBy(
      ~('c', 'category'),
      ~order_count : x | $x.o.id : y | $y->size()
   )->having({x | $x.order_count > 5})->orderBy([
      desc(sum(~('o', 'amount')))
   ])->limit(5);
   
   // Generate SQL for Snowflake
   let snowflakeSQL = $df->generateSnowflakeSQL();
   let expectedSnowflakeSQL = 'SELECT DISTINCT c.category AS category, COUNT(o.id) AS order_count, SUM(o.amount) AS total_amount\n' +
                             'FROM categories AS c LEFT OUTER JOIN orders AS o ON (c.id = o.category_id)\n' +
                             'WHERE ((o.amount > 100) AND (o.customer_id IS NOT NULL))\n' +
                             'GROUP BY c.category\n' +
                             'HAVING (COUNT(o.id) > 5)\n' +
                             'ORDER BY SUM(o.amount) DESC\n' +
                             'LIMIT 5';
   assertEquals($expectedSnowflakeSQL, $snowflakeSQL);
   
   // Generate SQL for DuckDB
   let duckdbSQL = $df->generateDuckDBSQL();
   let expectedDuckDBSQL = 'SELECT DISTINCT c.category AS category, COUNT(o.id) AS order_count, SUM(o.amount) AS total_amount\n' +
                          'FROM categories AS c LEFT JOIN orders AS o ON (c.id = o.category_id)\n' +
                          'WHERE ((o.amount > 100) AND (o.customer_id IS NOT NULL))\n' +
                          'GROUP BY c.category\n' +
                          'HAVING (COUNT(o.id) > 5)\n' +
                          'ORDER BY SUM(o.amount) DESC\n' +
                          'LIMIT 5';
   assertEquals($expectedDuckDBSQL, $duckdbSQL);
   
   true;
}

function <<test.Test>> meta::pure::dsl::tests::testDatabaseSpecificSyntaxDifferences(): Boolean[1]
{
   // Test a case where Snowflake and DuckDB have different syntax
   // In this case, LEFT OUTER JOIN vs LEFT JOIN
   let df = select([
      as(~('c', 'name'), 'customer_name'),
      as(~('o', 'id'), 'order_id')
   ])->from(
      leftJoin(
         tableAs('customers', 'c'),
         tableAs('orders', 'o'),
         {c, o | $c.id == $o.customer_id}
      )
   );
   
   // Generate SQL for Snowflake
   let snowflakeSQL = $df->generateSnowflakeSQL();
   assertEquals('SELECT c.name AS customer_name, o.id AS order_id\nFROM customers AS c LEFT OUTER JOIN orders AS o ON (c.id = o.customer_id)', $snowflakeSQL);
   
   // Generate SQL for DuckDB
   let duckdbSQL = $df->generateDuckDBSQL();
   assertEquals('SELECT c.name AS customer_name, o.id AS order_id\nFROM customers AS c LEFT JOIN orders AS o ON (c.id = o.customer_id)', $duckdbSQL);
   
   true;
}

// Window Function Tests

function <<test.Test>> meta::pure::dsl::tests::testWindowFunctionsBasic(): Boolean[1]
{
   // Create a SELECT query with basic window functions
   let df = select([
      as(~id, 'id'),
      as(~name, 'name'),
      as(over(rowNumber(), partitionBy([~category])->orderBy([asc(~id)])), 'row_num')
   ])->from(table('employees'));
   
   // Generate SQL for Snowflake
   let snowflakeSQL = $df->generateSnowflakeSQL();
   assertEquals('SELECT id AS id, name AS name, ROW_NUMBER() OVER(PARTITION BY category ORDER BY id ASC) AS row_num\nFROM employees', $snowflakeSQL);
   
   // Generate SQL for DuckDB
   let duckdbSQL = $df->generateDuckDBSQL();
   assertEquals('SELECT id AS id, name AS name, ROW_NUMBER() OVER(PARTITION BY category ORDER BY id ASC) AS row_num\nFROM employees', $duckdbSQL);
   
   true;
}

function <<test.Test>> meta::pure::dsl::tests::testWindowFunctionsWithFrames(): Boolean[1]
{
   // Create a SELECT query with window functions that use frames
   let df = select([
      as(~id, 'id'),
      as(~sales, 'sales'),
      as(over(sum(~sales), partitionBy([~region])
                               ->orderBy([asc(~date)])
                               ->rowsBetween(unboundedPreceding(), currentRow())), 'running_total'),
      as(over(avg(~sales), partitionBy([~region])
                               ->orderBy([asc(~date)])
                               ->rowsBetween(preceding(2), following(2))), 'moving_avg')
   ])->from(table('sales'));
   
   // Generate SQL for Snowflake
   let snowflakeSQL = $df->generateSnowflakeSQL();
   assertEquals('SELECT id AS id, sales AS sales, SUM(sales) OVER(PARTITION BY region ORDER BY date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS running_total, AVG(sales) OVER(PARTITION BY region ORDER BY date ASC ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS moving_avg\nFROM sales', $snowflakeSQL);
   
   // Generate SQL for DuckDB
   let duckdbSQL = $df->generateDuckDBSQL();
   assertEquals('SELECT id AS id, sales AS sales, SUM(sales) OVER(PARTITION BY region ORDER BY date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS running_total, AVG(sales) OVER(PARTITION BY region ORDER BY date ASC ROWS BETWEEN 2 PRECEDING AND 2 FOLLOWING) AS moving_avg\nFROM sales', $duckdbSQL);
   
   true;
}

function <<test.Test>> meta::pure::dsl::tests::testWindowFunctionsWithRange(): Boolean[1]
{
   // Create a SELECT query with window functions that use RANGE frame type
   let df = select([
      as(~id, 'id'),
      as(~date, 'date'),
      as(~sales, 'sales'),
      as(over(sum(~sales), partitionBy([~region])
                               ->orderBy([asc(~date)])
                               ->rangeBetween(unboundedPreceding(), currentRow())), 'running_total')
   ])->from(table('sales'));
   
   // Generate SQL for Snowflake
   let snowflakeSQL = $df->generateSnowflakeSQL();
   assertEquals('SELECT id AS id, date AS date, sales AS sales, SUM(sales) OVER(PARTITION BY region ORDER BY date ASC RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS running_total\nFROM sales', $snowflakeSQL);
   
   // Generate SQL for DuckDB
   let duckdbSQL = $df->generateDuckDBSQL();
   assertEquals('SELECT id AS id, date AS date, sales AS sales, SUM(sales) OVER(PARTITION BY region ORDER BY date ASC RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS running_total\nFROM sales', $duckdbSQL);
   
   true;
}

function <<test.Test>> meta::pure::dsl::tests::testLeadLagWindowFunctions(): Boolean[1]
{
   // Create a SELECT query with LEAD and LAG window functions
   let df = select([
      as(~id, 'id'),
      as(~date, 'date'),
      as(~sales, 'sales'),
      as(over(lead(~sales), partitionBy([~region])->orderBy([asc(~date)])), 'next_day_sales'),
      as(over(lead(~sales, 2, literal(0)), partitionBy([~region])->orderBy([asc(~date)])), 'sales_in_two_days'),
      as(over(lag(~sales), partitionBy([~region])->orderBy([asc(~date)])), 'prev_day_sales'),
      as(over(lag(~sales, 3, literal(0)), partitionBy([~region])->orderBy([asc(~date)])), 'sales_three_days_ago')
   ])->from(table('sales'));
   
   // Generate SQL for Snowflake
   let snowflakeSQL = $df->generateSnowflakeSQL();
   assertEquals('SELECT id AS id, date AS date, sales AS sales, LEAD(sales) OVER(PARTITION BY region ORDER BY date ASC) AS next_day_sales, LEAD(sales, 2, 0) OVER(PARTITION BY region ORDER BY date ASC) AS sales_in_two_days, LAG(sales) OVER(PARTITION BY region ORDER BY date ASC) AS prev_day_sales, LAG(sales, 3, 0) OVER(PARTITION BY region ORDER BY date ASC) AS sales_three_days_ago\nFROM sales', $snowflakeSQL);
   
   // Generate SQL for DuckDB
   let duckdbSQL = $df->generateDuckDBSQL();
   assertEquals('SELECT id AS id, date AS date, sales AS sales, LEAD(sales) OVER(PARTITION BY region ORDER BY date ASC) AS next_day_sales, LEAD(sales, 2, 0) OVER(PARTITION BY region ORDER BY date ASC) AS sales_in_two_days, LAG(sales) OVER(PARTITION BY region ORDER BY date ASC) AS prev_day_sales, LAG(sales, 3, 0) OVER(PARTITION BY region ORDER BY date ASC) AS sales_three_days_ago\nFROM sales', $duckdbSQL);
   
   true;
}

function <<test.Test>> meta::pure::dsl::tests::testRankingWindowFunctions(): Boolean[1]
{
   // Create a SELECT query with ranking window functions
   let df = select([
      as(~id, 'id'),
      as(~name, 'name'),
      as(~score, 'score'),
      as(over(rank(), partitionBy([~department])->orderBy([desc(~score)])), 'rank'),
      as(over(denseRank(), partitionBy([~department])->orderBy([desc(~score)])), 'dense_rank'),
      as(over(rowNumber(), partitionBy([~department])->orderBy([desc(~score)])), 'row_number')
   ])->from(table('employees'));
   
   // Generate SQL for Snowflake
   let snowflakeSQL = $df->generateSnowflakeSQL();
   assertEquals('SELECT id AS id, name AS name, score AS score, RANK() OVER(PARTITION BY department ORDER BY score DESC) AS rank, DENSE_RANK() OVER(PARTITION BY department ORDER BY score DESC) AS dense_rank, ROW_NUMBER() OVER(PARTITION BY department ORDER BY score DESC) AS row_number\nFROM employees', $snowflakeSQL);
   
   // Generate SQL for DuckDB
   let duckdbSQL = $df->generateDuckDBSQL();
   assertEquals('SELECT id AS id, name AS name, score AS score, RANK() OVER(PARTITION BY department ORDER BY score DESC) AS rank, DENSE_RANK() OVER(PARTITION BY department ORDER BY score DESC) AS dense_rank, ROW_NUMBER() OVER(PARTITION BY department ORDER BY score DESC) AS row_number\nFROM employees', $duckdbSQL);
   
   true;
}

function <<test.Test>> meta::pure::dsl::tests::testFirstLastValueWindowFunctions(): Boolean[1]
{
   // Create a SELECT query with FIRST_VALUE and LAST_VALUE window functions
   let df = select([
      as(~id, 'id'),
      as(~date, 'date'),
      as(~sales, 'sales'),
      as(over(firstValue(~sales), partitionBy([~region])
                                  ->orderBy([asc(~date)])
                                  ->rowsBetween(unboundedPreceding(), unboundedFollowing())), 'first_sale'),
      as(over(lastValue(~sales), partitionBy([~region])
                                 ->orderBy([asc(~date)])
                                 ->rowsBetween(unboundedPreceding(), unboundedFollowing())), 'last_sale')
   ])->from(table('sales'));
   
   // Generate SQL for Snowflake
   let snowflakeSQL = $df->generateSnowflakeSQL();
   assertEquals('SELECT id AS id, date AS date, sales AS sales, FIRST_VALUE(sales) OVER(PARTITION BY region ORDER BY date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS first_sale, LAST_VALUE(sales) OVER(PARTITION BY region ORDER BY date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_sale\nFROM sales', $snowflakeSQL);
   
   // Generate SQL for DuckDB
   let duckdbSQL = $df->generateDuckDBSQL();
   assertEquals('SELECT id AS id, date AS date, sales AS sales, FIRST_VALUE(sales) OVER(PARTITION BY region ORDER BY date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS first_sale, LAST_VALUE(sales) OVER(PARTITION BY region ORDER BY date ASC ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS last_sale\nFROM sales', $duckdbSQL);
   
   true;
}

function <<test.Test>> meta::pure::dsl::tests::testAggregateWindowFunctions(): Boolean[1]
{
   // Create a SELECT query with aggregate window functions
   let df = select([
      as(~id, 'id'),
      as(~department, 'department'),
      as(~salary, 'salary'),
      as(over(sum(~salary), partitionBy([~department])), 'dept_total'),
      as(over(avg(~salary), partitionBy([~department])), 'dept_avg'),
      as(over(min(~salary), partitionBy([~department])), 'dept_min'),
      as(over(max(~salary), partitionBy([~department])), 'dept_max'),
      as(over(count(~id), partitionBy([~department])), 'dept_count')
   ])->from(table('employees'));
   
   // Generate SQL for Snowflake
   let snowflakeSQL = $df->generateSnowflakeSQL();
   assertEquals('SELECT id AS id, department AS department, salary AS salary, SUM(salary) OVER(PARTITION BY department) AS dept_total, AVG(salary) OVER(PARTITION BY department) AS dept_avg, MIN(salary) OVER(PARTITION BY department) AS dept_min, MAX(salary) OVER(PARTITION BY department) AS dept_max, COUNT(id) OVER(PARTITION BY department) AS dept_count\nFROM employees', $snowflakeSQL);
   
   // Generate SQL for DuckDB
   let duckdbSQL = $df->generateDuckDBSQL();
   assertEquals('SELECT id AS id, department AS department, salary AS salary, SUM(salary) OVER(PARTITION BY department) AS dept_total, AVG(salary) OVER(PARTITION BY department) AS dept_avg, MIN(salary) OVER(PARTITION BY department) AS dept_min, MAX(salary) OVER(PARTITION BY department) AS dept_max, COUNT(id) OVER(PARTITION BY department) AS dept_count\nFROM employees', $duckdbSQL);
   
   true;
}

// Helper function for testing
function <<access.private>> meta::pure::dsl::tests::assertEquals(expected: String[1], actual: String[1]): Boolean[1]
{
   if($expected != $actual)
   {
      print('Expected: ' + $expected + '\nActual: ' + $actual);
      false;
   }
   else
   {
      true;
   }
}

function <<test.Test>> meta::pure::dsl::tests::testCommonTableExpressions(): Boolean[1]
{
   // Create a CTE for customer data
   let customerCte = cte('customers',
      select([
         as(~id, 'id'),
         as(~name, 'name')
      ])
      ->from(table('customer_data'))
   );
   
   // Create a CTE for order data
   let orderCte = cte('orders',
      select([
         as(~id, 'id'),
         as(~customer_id, 'customer_id'),
         as(~amount, 'amount')
      ])
      ->from(table('order_data'))
   );
   
   // Create a main query using the CTEs
   let df = select([
      as(~('c', 'name'), 'customer_name'),
      as(sum(~('o', 'amount')), 'total_orders')
   ])
   ->from(join(
      table('customers', 'c'),
      table('orders', 'o'),
      JoinType.INNER,
      {c, o | $c.id == $o.customer_id}
   ))
   ->groupBy(~('c', 'name'), ~total_orders : x | $x.o.amount : y | $y->sum())
   ->with([$customerCte, $orderCte]);
   
   // Generate SQL for all database types
   let snowflakeSQL = $df->generateSnowflakeSQL();
   let duckdbSQL = $df->generateDuckDBSQL();
   let bigquerySQL = $df->generateBigQuerySQL();
   let databricksSQL = $df->generateDatabricksSQL();
   
   // Add assertions to verify SQL output contains WITH clause for each database
   assert($snowflakeSQL->contains('WITH '));
   assert($duckdbSQL->contains('WITH '));
   assert($bigquerySQL->contains('WITH '));
   assert($databricksSQL->contains('WITH '));
   
   true;
}

function <<test.Test>> meta::pure::dsl::tests::testDatabricksSQL(): Boolean[1]
{
   // Create a simple DataFrame
   let df = select([
      as(~('c', 'name'), 'customer_name'),
      as(~('c', 'age'), 'customer_age')
   ])->from(tableAs('customers', 'c'))->filter({x | $x.c.age > 30});
   
   // Generate Databricks SQL
   let databricksSQL = $df->generateDatabricksSQL();
   
   // Expected SQL
   let expectedSQL = 'SELECT c.name AS customer_name, c.age AS customer_age\nFROM customers AS c\nWHERE (c.age > 30)';
   
   assertEquals($expectedSQL, $databricksSQL);
   
   // Test using toSQL function
   let databricksSQLViaToSQL = meta::pure::dsl::dataframe::toSQL($df, Database.DATABRICKS);
   assertEquals($expectedSQL, $databricksSQLViaToSQL);
   
   true;
}

function <<test.Test>> meta::pure::dsl::tests::testDatabricksQualify(): Boolean[1]
{
   // Create a DataFrame with a window function and QUALIFY clause
   let df = select([
      as(~('c', 'name'), 'customer_name'),
      as(~('c', 'region'), 'region'),
      as(~('c', 'sales'), 'sales'),
      as(rowNumber()->over(partitionBy([~('c', 'region')]), orderBy([desc(~('c', 'sales'))])), 'sales_rank')
   ])
   ->from(tableAs('customers', 'c'))
   ->qualify({x | $x.sales_rank <= 3}); // Only keep top 3 customers by sales in each region
   
   // Generate Databricks SQL
   let databricksSQL = $df->generateDatabricksSQL();
   
   // Verify QUALIFY clause is present
   assert($databricksSQL->contains('QUALIFY'));
   assert($databricksSQL->contains('sales_rank <= 3'));
   
   true;
}

function <<test.Test>> meta::pure::dsl::tests::testDatabricksClusterBy(): Boolean[1]
{
   // Create a DataFrame with CLUSTER BY clause (Databricks-specific)
   let df = select([
      as(~('c', 'name'), 'customer_name'),
      as(~('c', 'region'), 'region'),
      as(~('c', 'sales'), 'sales')
   ])
   ->from(tableAs('customers', 'c'))
   ->clusterBy([~region]); // Cluster results by region
   
   // Generate Databricks SQL
   let databricksSQL = $df->generateDatabricksSQL();
   
   // Verify CLUSTER BY clause is present
   assert($databricksSQL->contains('CLUSTER BY'));
   assert($databricksSQL->contains('CLUSTER BY region'));
   
   true;
}

function <<test.Test>> meta::pure::dsl::tests::testInlineTDS(): Boolean[1]
{
   // Test inline TDS definition
   let df = #TDS
            id, name, value
            1, 'John', 100
            2, 'Jane', 200
            3, 'Bob', 300
           #;
   
   // Test filtering on inline TDS
   let filtered = $df->filter({x | $x.value > 100});
   
   // Test SQL generation
   let sql = $filtered->generateDuckDBSQL();
   assertEquals('SELECT id, name, value\nFROM inline_tds\nWHERE (value > 100)', $sql);
   
   true;
}
