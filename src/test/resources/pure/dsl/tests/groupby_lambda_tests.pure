// Copyright 2025 Neema Raphael
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::dsl::dataframe::*;
import meta::pure::dsl::dataframe::metamodel::*;
import meta::pure::dsl::duckdb::*;
import meta::pure::dsl::snowflake::*;
import meta::pure::dsl::bigquery::*;

function <<test.Test>> meta::pure::dsl::tests::testSimpleGroupByLambda(): Boolean[1]
{
   let df = #TDS
      id, grp, name
      1, 2, A
      2, 1, B
      3, 3, C
      4, 4, D
      5, 2, E
      6, 1, F
      7, 3, G
      8, 1, H
      9, 5, I
      10, 0, J
   #;
   
   let result = $df->groupBy(~grp, ~newCol : x | $x.name : y | $y->joinStrings(''));
   
   let duckSQL = $result->generateDuckDBSQL();
   let snowflakeSQL = $result->generateSnowflakeSQL();
   let bigquerySQL = $result->generateBigQuerySQL();
   
   // Verify the SQL is as expected for each database
   assertEquals('SELECT grp, STRING_AGG(name, \'\') AS newCol FROM (VALUES (1, 2, \'A\'), (2, 1, \'B\'), (3, 3, \'C\'), (4, 4, \'D\'), (5, 2, \'E\'), (6, 1, \'F\'), (7, 3, \'G\'), (8, 1, \'H\'), (9, 5, \'I\'), (10, 0, \'J\')) AS _inline_tds(id, grp, name) GROUP BY grp', $duckSQL);
   assertEquals('SELECT grp, LISTAGG(name, \'\') WITHIN GROUP (ORDER BY name) AS newCol FROM (SELECT * FROM (VALUES (1, 2, \'A\'), (2, 1, \'B\'), (3, 3, \'C\'), (4, 4, \'D\'), (5, 2, \'E\'), (6, 1, \'F\'), (7, 3, \'G\'), (8, 1, \'H\'), (9, 5, \'I\'), (10, 0, \'J\')) AS _inline_tds(id, grp, name)) GROUP BY grp', $snowflakeSQL);
   assertEquals('SELECT grp, STRING_AGG(name, \'\') AS newCol FROM (SELECT * FROM UNNEST([STRUCT(1 AS id, 2 AS grp, \'A\' AS name), STRUCT(2 AS id, 1 AS grp, \'B\' AS name), STRUCT(3 AS id, 3 AS grp, \'C\' AS name), STRUCT(4 AS id, 4 AS grp, \'D\' AS name), STRUCT(5 AS id, 2 AS grp, \'E\' AS name), STRUCT(6 AS id, 1 AS grp, \'F\' AS name), STRUCT(7 AS id, 3 AS grp, \'G\' AS name), STRUCT(8 AS id, 1 AS grp, \'H\' AS name), STRUCT(9 AS id, 5 AS grp, \'I\' AS name), STRUCT(10 AS id, 0 AS grp, \'J\' AS name)])) GROUP BY grp', $bigquerySQL);
   
   true;
}

function <<test.Test>> meta::pure::dsl::tests::testGroupByLambdaMultipleColumns(): Boolean[1]
{
   let df = #TDS
      id, grp, name, value
      1, 2, A, 10
      2, 1, B, 20
      3, 3, C, 30
      4, 4, D, 40
      5, 2, E, 50
      6, 1, F, 60
      7, 3, G, 70
      8, 1, H, 80
      9, 5, I, 90
      10, 0, J, 100
   #;
   
   let result = $df->groupBy(~[grp, name], ~total : x | $x.value : y | $y->sum());
   
   let duckSQL = $result->generateDuckDBSQL();
   let snowflakeSQL = $result->generateSnowflakeSQL();
   let bigquerySQL = $result->generateBigQuerySQL();
   
   // Verify the SQL is as expected for each database
   assertEquals('SELECT grp, name, SUM(value) AS total FROM (VALUES (1, 2, \'A\', 10), (2, 1, \'B\', 20), (3, 3, \'C\', 30), (4, 4, \'D\', 40), (5, 2, \'E\', 50), (6, 1, \'F\', 60), (7, 3, \'G\', 70), (8, 1, \'H\', 80), (9, 5, \'I\', 90), (10, 0, \'J\', 100)) AS _inline_tds(id, grp, name, value) GROUP BY grp, name', $duckSQL);
   assertEquals('SELECT grp, name, SUM(value) AS total FROM (SELECT * FROM (VALUES (1, 2, \'A\', 10), (2, 1, \'B\', 20), (3, 3, \'C\', 30), (4, 4, \'D\', 40), (5, 2, \'E\', 50), (6, 1, \'F\', 60), (7, 3, \'G\', 70), (8, 1, \'H\', 80), (9, 5, \'I\', 90), (10, 0, \'J\', 100)) AS _inline_tds(id, grp, name, value)) GROUP BY grp, name', $snowflakeSQL);
   assertEquals('SELECT grp, name, SUM(value) AS total FROM (SELECT * FROM UNNEST([STRUCT(1 AS id, 2 AS grp, \'A\' AS name, 10 AS value), STRUCT(2 AS id, 1 AS grp, \'B\' AS name, 20 AS value), STRUCT(3 AS id, 3 AS grp, \'C\' AS name, 30 AS value), STRUCT(4 AS id, 4 AS grp, \'D\' AS name, 40 AS value), STRUCT(5 AS id, 2 AS grp, \'E\' AS name, 50 AS value), STRUCT(6 AS id, 1 AS grp, \'F\' AS name, 60 AS value), STRUCT(7 AS id, 3 AS grp, \'G\' AS name, 70 AS value), STRUCT(8 AS id, 1 AS grp, \'H\' AS name, 80 AS value), STRUCT(9 AS id, 5 AS grp, \'I\' AS name, 90 AS value), STRUCT(10 AS id, 0 AS grp, \'J\' AS name, 100 AS value)])) GROUP BY grp, name', $bigquerySQL);
   
   true;
}

function <<test.Test>> meta::pure::dsl::tests::testGroupByLambdaMultipleAggregations(): Boolean[1]
{
   let df = #TDS
      id, grp, name, value
      1, 2, A, 10
      2, 1, B, 20
      3, 3, C, 30
      4, 4, D, 40
      5, 2, E, 50
      6, 1, F, 60
      7, 3, G, 70
      8, 1, H, 80
      9, 5, I, 90
      10, 0, J, 100
   #;
   
   let result = $df->groupBy(~grp, ~[
      sum_val : x | $x.value : y | $y->sum(),
      avg_val : x | $x.value : y | $y->average(),
      count_val : x | $x.id : y | $y->size()
   ]);
   
   let duckSQL = $result->generateDuckDBSQL();
   let snowflakeSQL = $result->generateSnowflakeSQL();
   let bigquerySQL = $result->generateBigQuerySQL();
   
   // Verify the SQL is as expected for each database
   assertEquals('SELECT grp, SUM(value) AS sum_val, AVG(value) AS avg_val, COUNT(id) AS count_val FROM (VALUES (1, 2, \'A\', 10), (2, 1, \'B\', 20), (3, 3, \'C\', 30), (4, 4, \'D\', 40), (5, 2, \'E\', 50), (6, 1, \'F\', 60), (7, 3, \'G\', 70), (8, 1, \'H\', 80), (9, 5, \'I\', 90), (10, 0, \'J\', 100)) AS _inline_tds(id, grp, name, value) GROUP BY grp', $duckSQL);
   assertEquals('SELECT grp, SUM(value) AS sum_val, AVG(value) AS avg_val, COUNT(id) AS count_val FROM (SELECT * FROM (VALUES (1, 2, \'A\', 10), (2, 1, \'B\', 20), (3, 3, \'C\', 30), (4, 4, \'D\', 40), (5, 2, \'E\', 50), (6, 1, \'F\', 60), (7, 3, \'G\', 70), (8, 1, \'H\', 80), (9, 5, \'I\', 90), (10, 0, \'J\', 100)) AS _inline_tds(id, grp, name, value)) GROUP BY grp', $snowflakeSQL);
   assertEquals('SELECT grp, SUM(value) AS sum_val, AVG(value) AS avg_val, COUNT(id) AS count_val FROM (SELECT * FROM UNNEST([STRUCT(1 AS id, 2 AS grp, \'A\' AS name, 10 AS value), STRUCT(2 AS id, 1 AS grp, \'B\' AS name, 20 AS value), STRUCT(3 AS id, 3 AS grp, \'C\' AS name, 30 AS value), STRUCT(4 AS id, 4 AS grp, \'D\' AS name, 40 AS value), STRUCT(5 AS id, 2 AS grp, \'E\' AS name, 50 AS value), STRUCT(6 AS id, 1 AS grp, \'F\' AS name, 60 AS value), STRUCT(7 AS id, 3 AS grp, \'G\' AS name, 70 AS value), STRUCT(8 AS id, 1 AS grp, \'H\' AS name, 80 AS value), STRUCT(9 AS id, 5 AS grp, \'I\' AS name, 90 AS value), STRUCT(10 AS id, 0 AS grp, \'J\' AS name, 100 AS value)])) GROUP BY grp', $bigquerySQL);
   
   true;
}

function <<test.Test>> meta::pure::dsl::tests::testGroupByLambdaWithHaving(): Boolean[1]
{
   let df = #TDS
      id, grp, name, value
      1, 2, A, 10
      2, 1, B, 20
      3, 3, C, 30
      4, 4, D, 40
      5, 2, E, 50
      6, 1, F, 60
      7, 3, G, 70
      8, 1, H, 80
      9, 5, I, 90
      10, 0, J, 100
   #;
   
   let result = $df->groupBy(~grp, ~total : x | $x.value : y | $y->sum())
                  ->having({x | $x.total > 50});
   
   let duckSQL = $result->generateDuckDBSQL();
   let snowflakeSQL = $result->generateSnowflakeSQL();
   let bigquerySQL = $result->generateBigQuerySQL();
   
   // Verify the SQL is as expected for each database
   assertEquals('SELECT grp, SUM(value) AS total FROM (VALUES (1, 2, \'A\', 10), (2, 1, \'B\', 20), (3, 3, \'C\', 30), (4, 4, \'D\', 40), (5, 2, \'E\', 50), (6, 1, \'F\', 60), (7, 3, \'G\', 70), (8, 1, \'H\', 80), (9, 5, \'I\', 90), (10, 0, \'J\', 100)) AS _inline_tds(id, grp, name, value) GROUP BY grp HAVING (total > 50)', $duckSQL);
   assertEquals('SELECT grp, SUM(value) AS total FROM (SELECT * FROM (VALUES (1, 2, \'A\', 10), (2, 1, \'B\', 20), (3, 3, \'C\', 30), (4, 4, \'D\', 40), (5, 2, \'E\', 50), (6, 1, \'F\', 60), (7, 3, \'G\', 70), (8, 1, \'H\', 80), (9, 5, \'I\', 90), (10, 0, \'J\', 100)) AS _inline_tds(id, grp, name, value)) GROUP BY grp HAVING (total > 50)', $snowflakeSQL);
   assertEquals('SELECT grp, SUM(value) AS total FROM (SELECT * FROM UNNEST([STRUCT(1 AS id, 2 AS grp, \'A\' AS name, 10 AS value), STRUCT(2 AS id, 1 AS grp, \'B\' AS name, 20 AS value), STRUCT(3 AS id, 3 AS grp, \'C\' AS name, 30 AS value), STRUCT(4 AS id, 4 AS grp, \'D\' AS name, 40 AS value), STRUCT(5 AS id, 2 AS grp, \'E\' AS name, 50 AS value), STRUCT(6 AS id, 1 AS grp, \'F\' AS name, 60 AS value), STRUCT(7 AS id, 3 AS grp, \'G\' AS name, 70 AS value), STRUCT(8 AS id, 1 AS grp, \'H\' AS name, 80 AS value), STRUCT(9 AS id, 5 AS grp, \'I\' AS name, 90 AS value), STRUCT(10 AS id, 0 AS grp, \'J\' AS name, 100 AS value)])) GROUP BY grp HAVING (total > 50)', $bigquerySQL);
   
   true;
}

function <<test.Test>> meta::pure::dsl::tests::testGroupByLambdaWithOrderBy(): Boolean[1]
{
   let df = #TDS
      id, grp, name, value
      1, 2, A, 10
      2, 1, B, 20
      3, 3, C, 30
      4, 4, D, 40
      5, 2, E, 50
      6, 1, F, 60
      7, 3, G, 70
      8, 1, H, 80
      9, 5, I, 90
      10, 0, J, 100
   #;
   
   let result = $df->groupBy(~grp, ~total : x | $x.value : y | $y->sum())
                  ->orderBy([desc(~total)]);
   
   let duckSQL = $result->generateDuckDBSQL();
   let snowflakeSQL = $result->generateSnowflakeSQL();
   let bigquerySQL = $result->generateBigQuerySQL();
   
   // Verify the SQL is as expected for each database
   assertEquals('SELECT grp, SUM(value) AS total FROM (VALUES (1, 2, \'A\', 10), (2, 1, \'B\', 20), (3, 3, \'C\', 30), (4, 4, \'D\', 40), (5, 2, \'E\', 50), (6, 1, \'F\', 60), (7, 3, \'G\', 70), (8, 1, \'H\', 80), (9, 5, \'I\', 90), (10, 0, \'J\', 100)) AS _inline_tds(id, grp, name, value) GROUP BY grp ORDER BY total DESC', $duckSQL);
   assertEquals('SELECT grp, SUM(value) AS total FROM (SELECT * FROM (VALUES (1, 2, \'A\', 10), (2, 1, \'B\', 20), (3, 3, \'C\', 30), (4, 4, \'D\', 40), (5, 2, \'E\', 50), (6, 1, \'F\', 60), (7, 3, \'G\', 70), (8, 1, \'H\', 80), (9, 5, \'I\', 90), (10, 0, \'J\', 100)) AS _inline_tds(id, grp, name, value)) GROUP BY grp ORDER BY total DESC', $snowflakeSQL);
   assertEquals('SELECT grp, SUM(value) AS total FROM (SELECT * FROM UNNEST([STRUCT(1 AS id, 2 AS grp, \'A\' AS name, 10 AS value), STRUCT(2 AS id, 1 AS grp, \'B\' AS name, 20 AS value), STRUCT(3 AS id, 3 AS grp, \'C\' AS name, 30 AS value), STRUCT(4 AS id, 4 AS grp, \'D\' AS name, 40 AS value), STRUCT(5 AS id, 2 AS grp, \'E\' AS name, 50 AS value), STRUCT(6 AS id, 1 AS grp, \'F\' AS name, 60 AS value), STRUCT(7 AS id, 3 AS grp, \'G\' AS name, 70 AS value), STRUCT(8 AS id, 1 AS grp, \'H\' AS name, 80 AS value), STRUCT(9 AS id, 5 AS grp, \'I\' AS name, 90 AS value), STRUCT(10 AS id, 0 AS grp, \'J\' AS name, 100 AS value)])) GROUP BY grp ORDER BY total DESC', $bigquerySQL);
   
   true;
}

function <<test.Test>> meta::pure::dsl::tests::testGroupByWithCustomFunction(): Boolean[1]
{
   // Create a DataFrame with orders data
   let df = table('orders');
   
   // Create a custom aggregation that applies a user-defined function
   let customAgg = ^AggColSpec<{Any[1]->Any[0..1]},{Any[*]->Any[0..1]},Any>(
      name = 'custom_agg',
      keyFunc = {x:Any[1] | $x->get('amount')},
      valueFunc = {values:Any[*] | $values->sum()},
      functionExpression = ^FunctionExpression(
         functionName = 'ROUND',
         parameters = [
            ^FunctionExpression(
               functionName = 'AVG',
               parameters = [^ColumnReference(colSpec = ^ColSpec<Any>(name = 'amount'))]
            ),
            ^LiteralExpression(value = 2)
         ]
      )
   );
   
   // Group by customer_id with custom aggregation
   let result = $df->groupBy(~customer_id, $customAgg);
   
   // Generate SQL for each supported database
   let duckSQL = $result->generateDuckDBSQL();
   assertEquals(true, $duckSQL->contains('ROUND(AVG(amount), 2)'));
   
   let snowflakeSQL = $result->generateSnowflakeSQL();
   assertEquals(true, $snowflakeSQL->contains('ROUND(AVG(amount), 2)'));
   
   let bigquerySQL = $result->generateBigQuerySQL();
   assertEquals(true, $bigquerySQL->contains('ROUND(AVG(amount), 2)'));
   
   true;
}
