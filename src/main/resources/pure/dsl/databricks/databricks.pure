// Copyright 2025 Neema Raphael
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::dsl::dataframe::*;
import meta::pure::dsl::dataframe::metamodel::*;
import meta::pure::dsl::dataframe::metamodel::column::*;

/**
 * Databricks SQL generator for the DataFrame DSL
 * This module provides functions to convert DataFrame objects to Databricks SQL syntax
 */

// Main function to generate Databricks SQL from a DataFrame
function meta::pure::dsl::databricks::generateDatabricksSQL(df: DataFrame[1]): String[1]
{
   let withClause = generateWithClause($df);
   let selectClause = generateSelectClause($df);
   let fromClause = generateFromClause($df);
   let whereClause = generateWhereClause($df);
   let groupByClause = generateGroupByClause($df);
   let havingClause = generateHavingClause($df);
   let qualifyClause = generateQualifyClause($df);
   let orderByClause = generateOrderByClause($df);
   let limitClause = generateLimitClause($df);
   
   $withClause + $selectClause + $fromClause + $whereClause + $groupByClause + $havingClause + $qualifyClause + $orderByClause + $limitClause;
}

// Generate the WITH clause
function <<access.private>> meta::pure::dsl::databricks::generateWithClause(df: DataFrame[1]): String[1]
{
   if($df.ctes->isEmpty(), 
      '', 
      'WITH ' + $df.ctes->map(cte | 
         if($cte.isRecursive, 
            'RECURSIVE ', 
            '') + 
         $cte.name + if($cte.columns->isEmpty(), '', '(' + $cte.columns->joinStrings(', ') + ')') + ' AS (' + 
         if($cte.query->instanceOf(DataFrame), 
            meta::pure::dsl::databricks::generateDatabricksSQL($cte.query->cast(@DataFrame)), 
            $cte.query->cast(@String)) + 
         ')'
      )->joinStrings(',\n') + '\n');
}

// Generate the SELECT clause
function <<access.private>> meta::pure::dsl::databricks::generateSelectClause(df: DataFrame[1]): String[1]
{
   'SELECT ' + 
   if($df.distinct, 'DISTINCT ', '') + 
   if($df.columns->isEmpty(), 
      '*', 
      $df.columns->map(c | $c->generateDatabricksExpression() + if($c.alias->isEmpty(), '', ' AS ' + $c.alias->toOne()))->joinStrings(', '));
}

// Generate the FROM clause
function <<access.private>> meta::pure::dsl::databricks::generateFromClause(df: DataFrame[1]): String[1]
{
   if($df.source->isEmpty(), 
      '', 
      '\nFROM ' + $df.source->toOne()->generateDatabricksSource());
}

// Generate the WHERE clause
function <<access.private>> meta::pure::dsl::databricks::generateWhereClause(df: DataFrame[1]): String[1]
{
   if($df.filter->isEmpty(), 
      '', 
      '\nWHERE ' + if($df.filter->toOne()->instanceOf(LambdaFilterCondition),
                      meta::pure::dsl::dataframe::generateLambdaFilterSQL($df.filter->toOne()->cast(@LambdaFilterCondition).lambda, Database.DATABRICKS, {e | generateDatabricksExpression($e)}, $df.filter->toOne()->cast(@LambdaFilterCondition).tableAlias),
                      $df.filter->toOne()->generateDatabricksExpression()));
}

// Generate the GROUP BY clause
function <<access.private>> meta::pure::dsl::databricks::generateGroupByClause(df: DataFrame[1]): String[1]
{
   if($df.groupBy->isEmpty() || ($df.groupBy->instanceOf(GroupByClause) && $df.groupBy.columns->isEmpty()), 
      '', 
      '\nGROUP BY ' + 
      if($df.groupBy->instanceOf(LambdaGroupByClause),
         meta::pure::dsl::dataframe::generateLambdaGroupBySQL($df.groupBy->cast(@LambdaGroupByClause).lambda, Database.DATABRICKS, {e | generateDatabricksExpression($e)}, $df.groupBy->cast(@LambdaGroupByClause).tableAlias),
         if($df.groupBy.type == GroupByType.STANDARD,
            $df.groupBy.columns->map(c | $c->generateDatabricksExpression())->joinStrings(', '),
            if($df.groupBy.type == GroupByType.CUBE,
               'CUBE(' + $df.groupBy.columns->map(c | $c->generateDatabricksExpression())->joinStrings(', ') + ')',
               if($df.groupBy.type == GroupByType.ROLLUP,
                  'ROLLUP(' + $df.groupBy.columns->map(c | $c->generateDatabricksExpression())->joinStrings(', ') + ')',
                  // GROUPING SETS
                  'GROUPING SETS(' + $df.groupBy.groupingSets->map(gs | 
                     '(' + $gs->map(c | $c->generateDatabricksExpression())->joinStrings(', ') + ')'
                  )->joinStrings(', ') + ')'
               )
            )
         )
      )
   );
}

// Generate the HAVING clause
function <<access.private>> meta::pure::dsl::databricks::generateHavingClause(df: DataFrame[1]): String[1]
{
   if($df.having->isEmpty(), 
      '', 
      '\nHAVING ' + $df.having->toOne()->generateDatabricksExpression());
}

// Generate the QUALIFY clause (Databricks-specific)
function <<access.private>> meta::pure::dsl::databricks::generateQualifyClause(df: DataFrame[1]): String[1]
{
   if($df.qualify->isEmpty(), 
      '', 
      '\nQUALIFY ' + $df.qualify->toOne()->generateDatabricksExpression());
}

// Generate the ORDER BY clause
function <<access.private>> meta::pure::dsl::databricks::generateOrderByClause(df: DataFrame[1]): String[1]
{
   if($df.orderBy->isEmpty(), 
      '', 
      '\nORDER BY ' + $df.orderBy->map(o | 
         $o.column->generateDatabricksExpression() + 
         if($o.direction == SortDirection.ASC, '', ' DESC') + 
         if($o.nulls == NullsOrder.FIRST, ' NULLS FIRST', if($o.nulls == NullsOrder.LAST, ' NULLS LAST', ''))
      )->joinStrings(', '));
}

// Generate the LIMIT clause
function <<access.private>> meta::pure::dsl::databricks::generateLimitClause(df: DataFrame[1]): String[1]
{
   if($df.limit->isEmpty(), 
      '', 
      '\nLIMIT ' + $df.limit->toOne()->toString());
}

// Generate SQL for a data source
function <<access.private>> meta::pure::dsl::databricks::generateDatabricksSource(source: DataSource[1]): String[1]
{
   $source->match([
      t: TableReference[1] | if($t.schema->isNotEmpty(), $t.schema->toOne() + '.', '') + $t.tableName + if($t.alias->isNotEmpty(), ' AS ' + $t.alias->toOne(), ''),
      j: JoinOperation[1] | $j.left->generateDatabricksSource() + ' ' + $j.joinType->generateDatabricksJoinType() + ' ' + $j.right->generateDatabricksSource() + ' ON ' + $j.condition->generateDatabricksExpression(),
      s: SubquerySource[1] | '(' + $s.dataFrame->generateDatabricksSQL() + ') AS ' + $s.alias,
      l: LateralJoin[1] | $l.left->generateDatabricksSource() + ' ' + $l.joinType->generateDatabricksJoinType() + ' LATERAL ' + '(' + $l.right->generateDatabricksSQL() + ')' + if($l.alias->isEmpty(), '', ' AS ' + $l.alias->toOne()) + if($l.condition->isEmpty(), '', ' ON ' + $l.condition->toOne()->generateDatabricksExpression()),
      d: DataSource[1] | 'UNKNOWN_SOURCE_TYPE'
   ]);
}

// Generate SQL for join types
function <<access.private>> meta::pure::dsl::databricks::generateDatabricksJoinType(joinType: JoinType[1]): String[1]
{
   $joinType->match([
      JoinType.INNER | 'INNER JOIN',
      JoinType.LEFT_OUTER | 'LEFT OUTER JOIN',
      JoinType.RIGHT_OUTER | 'RIGHT OUTER JOIN',
      JoinType.FULL_OUTER | 'FULL OUTER JOIN',
      JoinType.CROSS | 'CROSS JOIN'
   ]);
}

// Generate Databricks expression for a column
function <<access.private>> meta::pure::dsl::databricks::generateDatabricksExpression(column: Column[1]): String[1]
{
   $column->match([
      c: ColumnReference[1] | if($c.tableAlias->isNotEmpty(), $c.tableAlias->toOne() + '.', '') + $c.columnName,
      c: LiteralColumn[1] | generateDatabricksLiteral($c.value),
      c: FunctionColumn[1] | generateDatabricksFunction($c),
      c: CaseColumn[1] | generateDatabricksCase($c),
      c: WindowFunction[1] | generateDatabricksWindowFunction($c),
      c: SubqueryColumn[1] | '(' + meta::pure::dsl::databricks::generateDatabricksSQL($c.query) + ')',
      c: PivotColumn[1] | generateDatabricksPivot($c),
      c: UnpivotColumn[1] | generateDatabricksUnpivot($c),
      c: ScalarFunction[1] | meta::pure::dsl::dataframe::generateScalarFunctionSQL($c, Database.DATABRICKS, {e | generateDatabricksExpression($e)}),
      c: Column[1] | 'UNKNOWN_COLUMN_TYPE'
   ]);
}

// Generate Databricks literal
function <<access.private>> meta::pure::dsl::databricks::generateDatabricksLiteral(value: Any[1]): String[1]
{
   $value->match([
      s: String[1] | '\'' + $s + '\'',
      i: Integer[1] | $i->toString(),
      f: Float[1] | $f->toString(),
      d: Decimal[1] | $d->toString(),
      b: Boolean[1] | if($b, 'TRUE', 'FALSE'),
      d: Date[1] | 'DATE \'' + $d->toString() + '\'',
      t: DateTime[1] | 'TIMESTAMP \'' + $t->toString() + '\'',
      n: Null[1] | 'NULL',
      a: Any[1] | 'UNKNOWN_LITERAL_TYPE'
   ]);
}

// Generate Databricks function
function <<access.private>> meta::pure::dsl::databricks::generateDatabricksFunction(func: FunctionColumn[1]): String[1]
{
   $func.name + '(' + $func.arguments->map(arg | $arg->generateDatabricksExpression())->joinStrings(', ') + ')';
}

// Generate Databricks CASE expression
function <<access.private>> meta::pure::dsl::databricks::generateDatabricksCase(caseCol: CaseColumn[1]): String[1]
{
   'CASE ' + 
   if($caseCol.condition->isEmpty(), 
      '', 
      $caseCol.condition->toOne()->generateDatabricksExpression() + ' ') + 
   $caseCol.whenClauses->map(wc | 
      'WHEN ' + $wc.condition->generateDatabricksExpression() + 
      ' THEN ' + $wc.result->generateDatabricksExpression()
   )->joinStrings(' ') + 
   if($caseCol.elseResult->isEmpty(), 
      '', 
      ' ELSE ' + $caseCol.elseResult->toOne()->generateDatabricksExpression()) + 
   ' END';
}


// Generate Databricks PIVOT
function <<access.private>> meta::pure::dsl::databricks::generateDatabricksPivot(pivot: PivotColumn[1]): String[1]
{
   'PIVOT(' + 
   $pivot.aggregateFunction->generateDatabricksExpression() + 
   ' FOR ' + $pivot.pivotColumn->generateDatabricksExpression() + 
   ' IN (' + $pivot.pivotValues->map(v | $v->generateDatabricksExpression())->joinStrings(', ') + ')' + 
   ')';
}

// Generate Databricks UNPIVOT
function <<access.private>> meta::pure::dsl::databricks::generateDatabricksUnpivot(unpivot: UnpivotColumn[1]): String[1]
{
   'UNPIVOT(' + 
   $unpivot.valueColumn + ' FOR ' + $unpivot.nameColumn + 
   ' IN (' + $unpivot.columns->map(c | $c->generateDatabricksExpression() + if($c.alias->isEmpty(), '', ' AS ' + $c.alias->toOne()))->joinStrings(', ') + ')' + 
   ')';
}

// Generate SQL for window specifications
function <<access.private>> meta::pure::dsl::databricks::generateDatabricksWindowSpec(windowSpec: Window[1]): String[1]
{
   meta::pure::dsl::dataframe::generateWindowSpecSQL($windowSpec, {e | generateDatabricksExpression($e)});
}

// Generate Databricks window function with WindowFunction parameter
function <<access.private>> meta::pure::dsl::databricks::generateDatabricksWindowFunction(func: WindowFunction[1]): String[1]
{
   meta::pure::dsl::dataframe::generateWindowFunctionSQL($func, {e | generateDatabricksExpression($e)}, {w | generateDatabricksWindowSpec($w)});
}

// Generate Databricks binary operators
function <<access.private>> meta::pure::dsl::databricks::generateDatabricksBinaryOperator(op: BinaryOperator[1]): String[1]
{
   $op->match([
      BinaryOperator.EQUAL | '=',
      BinaryOperator.NOT_EQUAL | '!=',
      BinaryOperator.GREATER_THAN | '>',
      BinaryOperator.GREATER_THAN_EQUAL | '>=',
      BinaryOperator.LESS_THAN | '<',
      BinaryOperator.LESS_THAN_EQUAL | '<=',
      BinaryOperator.AND | 'AND',
      BinaryOperator.OR | 'OR',
      BinaryOperator.ADD | '+',
      BinaryOperator.SUBTRACT | '-',
      BinaryOperator.MULTIPLY | '*',
      BinaryOperator.DIVIDE | '/',
      BinaryOperator.MODULO | '%',
      BinaryOperator.LIKE | 'LIKE',
      BinaryOperator.NOT_LIKE | 'NOT LIKE',
      BinaryOperator.IN | 'IN',
      BinaryOperator.NOT_IN | 'NOT IN',
      BinaryOperator.IS | 'IS',
      BinaryOperator.IS_NOT | 'IS NOT',
      BinaryOperator.BETWEEN | 'BETWEEN',
      BinaryOperator.NOT_BETWEEN | 'NOT BETWEEN'
   ]);
}

// Generate Databricks unary operators
function <<access.private>> meta::pure::dsl::databricks::generateDatabricksUnaryOperator(op: UnaryOperator[1]): String[1]
{
   $op->match([
      UnaryOperator.NOT | 'NOT ',
      UnaryOperator.NEGATE | '-',
      UnaryOperator.EXISTS | 'EXISTS ',
      UnaryOperator.NOT_EXISTS | 'NOT EXISTS '
   ]);
}
