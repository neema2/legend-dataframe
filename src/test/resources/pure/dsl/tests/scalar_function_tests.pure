// Copyright 2025 Neema Raphael
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::dsl::dataframe::*;
import meta::pure::dsl::dataframe::metamodel::*;
import meta::pure::dsl::dataframe::metamodel::scalar::*;
import meta::pure::dsl::dataframe::scalar::*;
import meta::pure::dsl::snowflake::*;
import meta::pure::dsl::duckdb::*;
import meta::pure::dsl::bigquery::*;
import meta::pure::dsl::databricks::*;
import meta::pure::dsl::redshift::*;
import meta::pure::dsl::postgres::*;

/**
 * Tests for scalar function SQL generation across database dialects
 */

function <<test.Test>> meta::pure::dsl::tests::testCommonMathFunctions(): Boolean[1]
{
   // Create a DataFrame with math functions
   let df = select([
      abs(col('value'))->as('abs_value'),
      cos(col('angle'))->as('cos_angle')
   ])
   ->from(table('data'));
   
   // Test SQL generation across all supported databases
   let snowflakeSQL = $df->generateSnowflakeSQL();
   let duckdbSQL = $df->generateDuckDBSQL();
   let bigquerySQL = $df->generateBigQuerySQL();
   let databricksSQL = $df->generateDatabricksSQL();
   let redshiftSQL = $df->generateRedshiftSQL();
   let postgresSQL = $df->generatePostgresSQL();
   
   // Verify SQL contains expected syntax
   assertEquals(true, $snowflakeSQL->contains('ABS(value) AS abs_value'));
   assertEquals(true, $snowflakeSQL->contains('COS(angle) AS cos_angle'));
   
   assertEquals(true, $duckdbSQL->contains('ABS(value) AS abs_value'));
   assertEquals(true, $duckdbSQL->contains('COS(angle) AS cos_angle'));
   
   assertEquals(true, $bigquerySQL->contains('ABS(value) AS abs_value'));
   assertEquals(true, $bigquerySQL->contains('COS(angle) AS cos_angle'));
   
   assertEquals(true, $databricksSQL->contains('ABS(value) AS abs_value'));
   assertEquals(true, $databricksSQL->contains('COS(angle) AS cos_angle'));
   
   assertEquals(true, $redshiftSQL->contains('ABS(value) AS abs_value'));
   assertEquals(true, $redshiftSQL->contains('COS(angle) AS cos_angle'));
   
   assertEquals(true, $postgresSQL->contains('ABS(value) AS abs_value'));
   assertEquals(true, $postgresSQL->contains('COS(angle) AS cos_angle'));
   
   true;
}

function <<test.Test>> meta::pure::dsl::tests::testDateFunctionsWithVaryingSyntax(): Boolean[1]
{
   // Create a DataFrame with date functions
   let df = select([
      datediff(literal('day'), col('start_date'), col('end_date'))->as('days_diff')
   ])
   ->from(table('date_data'));
   
   // Test SQL generation across all supported databases
   let snowflakeSQL = $df->generateSnowflakeSQL();
   let duckdbSQL = $df->generateDuckDBSQL();
   let bigquerySQL = $df->generateBigQuerySQL();
   let databricksSQL = $df->generateDatabricksSQL();
   let redshiftSQL = $df->generateRedshiftSQL();
   let postgresSQL = $df->generatePostgresSQL();
   
   // Verify SQL contains expected database-specific syntax
   assertEquals(true, $snowflakeSQL->contains('DATEDIFF(\'day\', start_date, end_date) AS days_diff'));
   assertEquals(true, $duckdbSQL->contains('DATEDIFF(\'day\', start_date, end_date) AS days_diff'));
   assertEquals(true, $bigquerySQL->contains('DATE_DIFF(\'day\', start_date, end_date) AS days_diff'));
   assertEquals(true, $databricksSQL->contains('DATEDIFF(\'day\', start_date, end_date) AS days_diff'));
   assertEquals(true, $redshiftSQL->contains('DATEDIFF(\'day\', start_date, end_date) AS days_diff'));
   assertEquals(true, $postgresSQL->contains('DATE_PART(\'day\', (end_date - start_date)) AS days_diff'));
   
   true;
}

function <<test.Test>> meta::pure::dsl::tests::testStringFunctions(): Boolean[1]
{
   // Create a DataFrame with string functions
   let df = select([
      upper(col('name'))->as('upper_name'),
      lower(col('name'))->as('lower_name'),
      length(col('name'))->as('name_length')
   ])
   ->from(table('users'));
   
   // Test SQL generation across all supported databases
   let snowflakeSQL = $df->generateSnowflakeSQL();
   let duckdbSQL = $df->generateDuckDBSQL();
   let bigquerySQL = $df->generateBigQuerySQL();
   let databricksSQL = $df->generateDatabricksSQL();
   let redshiftSQL = $df->generateRedshiftSQL();
   let postgresSQL = $df->generatePostgresSQL();
   
   // Verify SQL contains expected syntax
   assertEquals(true, $snowflakeSQL->contains('UPPER(name) AS upper_name'));
   assertEquals(true, $snowflakeSQL->contains('LOWER(name) AS lower_name'));
   assertEquals(true, $snowflakeSQL->contains('LENGTH(name) AS name_length'));
   
   assertEquals(true, $duckdbSQL->contains('UPPER(name) AS upper_name'));
   assertEquals(true, $duckdbSQL->contains('LOWER(name) AS lower_name'));
   assertEquals(true, $duckdbSQL->contains('LENGTH(name) AS name_length'));
   
   assertEquals(true, $bigquerySQL->contains('UPPER(name) AS upper_name'));
   assertEquals(true, $bigquerySQL->contains('LOWER(name) AS lower_name'));
   assertEquals(true, $bigquerySQL->contains('LENGTH(name) AS name_length'));
   
   assertEquals(true, $databricksSQL->contains('UPPER(name) AS upper_name'));
   assertEquals(true, $databricksSQL->contains('LOWER(name) AS lower_name'));
   assertEquals(true, $databricksSQL->contains('LENGTH(name) AS name_length'));
   
   assertEquals(true, $redshiftSQL->contains('UPPER(name) AS upper_name'));
   assertEquals(true, $redshiftSQL->contains('LOWER(name) AS lower_name'));
   assertEquals(true, $redshiftSQL->contains('LENGTH(name) AS name_length'));
   
   assertEquals(true, $postgresSQL->contains('UPPER(name) AS upper_name'));
   assertEquals(true, $postgresSQL->contains('LOWER(name) AS lower_name'));
   assertEquals(true, $postgresSQL->contains('LENGTH(name) AS name_length'));
   
   true;
}

function <<test.Test>> meta::pure::dsl::tests::testNestedScalarFunctions(): Boolean[1]
{
   // Create a DataFrame with nested scalar functions
   let df = select([
      abs(cos(col('angle')))->as('abs_cos')
   ])
   ->from(table('trig_data'));
   
   // Test SQL generation across all supported databases
   let snowflakeSQL = $df->generateSnowflakeSQL();
   let duckdbSQL = $df->generateDuckDBSQL();
   let bigquerySQL = $df->generateBigQuerySQL();
   let databricksSQL = $df->generateDatabricksSQL();
   let redshiftSQL = $df->generateRedshiftSQL();
   let postgresSQL = $df->generatePostgresSQL();
   
   // Verify SQL contains expected nested function syntax
   assertEquals(true, $snowflakeSQL->contains('ABS(COS(angle)) AS abs_cos'));
   assertEquals(true, $duckdbSQL->contains('ABS(COS(angle)) AS abs_cos'));
   assertEquals(true, $bigquerySQL->contains('ABS(COS(angle)) AS abs_cos'));
   assertEquals(true, $databricksSQL->contains('ABS(COS(angle)) AS abs_cos'));
   assertEquals(true, $redshiftSQL->contains('ABS(COS(angle)) AS abs_cos'));
   assertEquals(true, $postgresSQL->contains('ABS(COS(angle)) AS abs_cos'));
   
   true;
}

function <<test.Test>> meta::pure::dsl::tests::testScalarFunctionRegistryConsistency(): Boolean[1]
{
   // Get the scalar function registry
   let registry = scalarFunctionRegistry();
   
   // Verify all implemented functions support all 6 databases
   let absImplementation = $registry->get('abs')->toOne();
   assertEquals(6, $absImplementation.databases->keys()->size());
   assertEquals(true, $absImplementation.databases->containsKey(Database.SNOWFLAKE));
   assertEquals(true, $absImplementation.databases->containsKey(Database.DUCKDB));
   assertEquals(true, $absImplementation.databases->containsKey(Database.BIGQUERY));
   assertEquals(true, $absImplementation.databases->containsKey(Database.DATABRICKS));
   assertEquals(true, $absImplementation.databases->containsKey(Database.REDSHIFT));
   assertEquals(true, $absImplementation.databases->containsKey(Database.POSTGRES));
   
   // Verify datediff has parameter transformations for Postgres
   let datediffImplementation = $registry->get('datediff')->toOne();
   assertEquals(true, $datediffImplementation.parameterTransformations->isNotEmpty());
   assertEquals(true, $datediffImplementation.parameterTransformations->toOne()->containsKey(Database.POSTGRES));
   
   true;
}

function <<test.Test>> meta::pure::dsl::tests::testDatabaseSpecificFunctions(): Boolean[1]
{
   // Create a time_bucket function (which has different names across databases)
   let df = select([
      time_bucket(literal('1 hour'), col('event_time'))->as('hour_bucket')
   ])
   ->from(table('events'));
   
   // Test SQL generation across all supported databases
   let snowflakeSQL = $df->generateSnowflakeSQL();
   let duckdbSQL = $df->generateDuckDBSQL();
   let bigquerySQL = $df->generateBigQuerySQL();
   let databricksSQL = $df->generateDatabricksSQL();
   let redshiftSQL = $df->generateRedshiftSQL();
   let postgresSQL = $df->generatePostgresSQL();
   
   // Verify SQL contains expected database-specific syntax
   assertEquals(true, $snowflakeSQL->contains('TIME_SLICE(\'1 hour\', event_time) AS hour_bucket'));
   assertEquals(true, $duckdbSQL->contains('TIME_BUCKET(\'1 hour\', event_time) AS hour_bucket'));
   assertEquals(true, $bigquerySQL->contains('TIMESTAMP_TRUNC(event_time, \'1 hour\') AS hour_bucket'));
   assertEquals(true, $databricksSQL->contains('DATE_TRUNC(\'1 hour\', event_time) AS hour_bucket'));
   assertEquals(true, $redshiftSQL->contains('DATE_TRUNC(\'1 hour\', event_time) AS hour_bucket'));
   assertEquals(true, $postgresSQL->contains('DATE_BIN(\'1 hour\', event_time, \'1970-01-01\'::timestamp) AS hour_bucket'));
   
   true;
}

function <<test.Test>> meta::pure::dsl::tests::testConditionalFunctions(): Boolean[1]
{
   // Create a DataFrame with conditional functions
   let df = select([
      coalesce(col('value'), literal(0))->as('coalesced_value'),
      nullif(col('value'), literal(0))->as('nullif_value'),
      greatest(col('value1'), col('value2'), col('value3'))->as('greatest_value'),
      least(col('value1'), col('value2'), col('value3'))->as('least_value')
   ])
   ->from(table('data'));
   
   // Test SQL generation across all supported databases
   let snowflakeSQL = $df->generateSnowflakeSQL();
   let duckdbSQL = $df->generateDuckDBSQL();
   let bigquerySQL = $df->generateBigQuerySQL();
   let databricksSQL = $df->generateDatabricksSQL();
   let redshiftSQL = $df->generateRedshiftSQL();
   let postgresSQL = $df->generatePostgresSQL();
   
   // Verify SQL contains expected syntax
   assertEquals(true, $snowflakeSQL->contains('COALESCE(value, 0) AS coalesced_value'));
   assertEquals(true, $snowflakeSQL->contains('NULLIF(value, 0) AS nullif_value'));
   assertEquals(true, $snowflakeSQL->contains('GREATEST(value1, value2, value3) AS greatest_value'));
   assertEquals(true, $snowflakeSQL->contains('LEAST(value1, value2, value3) AS least_value'));
   
   assertEquals(true, $duckdbSQL->contains('COALESCE(value, 0) AS coalesced_value'));
   assertEquals(true, $duckdbSQL->contains('NULLIF(value, 0) AS nullif_value'));
   assertEquals(true, $duckdbSQL->contains('GREATEST(value1, value2, value3) AS greatest_value'));
   assertEquals(true, $duckdbSQL->contains('LEAST(value1, value2, value3) AS least_value'));
   
   assertEquals(true, $bigquerySQL->contains('COALESCE(value, 0) AS coalesced_value'));
   assertEquals(true, $bigquerySQL->contains('NULLIF(value, 0) AS nullif_value'));
   assertEquals(true, $bigquerySQL->contains('GREATEST(value1, value2, value3) AS greatest_value'));
   assertEquals(true, $bigquerySQL->contains('LEAST(value1, value2, value3) AS least_value'));
   
   assertEquals(true, $databricksSQL->contains('COALESCE(value, 0) AS coalesced_value'));
   assertEquals(true, $databricksSQL->contains('NULLIF(value, 0) AS nullif_value'));
   assertEquals(true, $databricksSQL->contains('GREATEST(value1, value2, value3) AS greatest_value'));
   assertEquals(true, $databricksSQL->contains('LEAST(value1, value2, value3) AS least_value'));
   
   assertEquals(true, $redshiftSQL->contains('COALESCE(value, 0) AS coalesced_value'));
   assertEquals(true, $redshiftSQL->contains('NULLIF(value, 0) AS nullif_value'));
   assertEquals(true, $redshiftSQL->contains('GREATEST(value1, value2, value3) AS greatest_value'));
   assertEquals(true, $redshiftSQL->contains('LEAST(value1, value2, value3) AS least_value'));
   
   assertEquals(true, $postgresSQL->contains('COALESCE(value, 0) AS coalesced_value'));
   assertEquals(true, $postgresSQL->contains('NULLIF(value, 0) AS nullif_value'));
   assertEquals(true, $postgresSQL->contains('GREATEST(value1, value2, value3) AS greatest_value'));
   assertEquals(true, $postgresSQL->contains('LEAST(value1, value2, value3) AS least_value'));
   
   true;
}

function <<test.Test>> meta::pure::dsl::tests::testConversionFunctions(): Boolean[1]
{
   // Create a DataFrame with conversion functions
   let df = select([
      cast(col('value'), literal('INTEGER'))->as('int_value'),
      toNumber(col('string_value'))->as('numeric_value'),
      toDate(col('date_string'), literal('YYYY-MM-DD'))->as('date_value'),
      toTimestamp(col('timestamp_string'), literal('YYYY-MM-DD HH24:MI:SS'))->as('timestamp_value')
   ])
   ->from(table('data'));
   
   // Test SQL generation across all supported databases
   let snowflakeSQL = $df->generateSnowflakeSQL();
   let duckdbSQL = $df->generateDuckDBSQL();
   let bigquerySQL = $df->generateBigQuerySQL();
   let databricksSQL = $df->generateDatabricksSQL();
   let redshiftSQL = $df->generateRedshiftSQL();
   let postgresSQL = $df->generatePostgresSQL();
   
   // Verify SQL contains expected syntax
   assertEquals(true, $snowflakeSQL->contains('CAST(value AS INTEGER) AS int_value'));
   assertEquals(true, $snowflakeSQL->contains('TO_NUMBER(string_value) AS numeric_value'));
   assertEquals(true, $snowflakeSQL->contains('TO_DATE(date_string, \'YYYY-MM-DD\') AS date_value'));
   assertEquals(true, $snowflakeSQL->contains('TO_TIMESTAMP(timestamp_string, \'YYYY-MM-DD HH24:MI:SS\') AS timestamp_value'));
   
   assertEquals(true, $duckdbSQL->contains('CAST(value AS INTEGER) AS int_value'));
   assertEquals(true, $duckdbSQL->contains('CAST(string_value AS DOUBLE) AS numeric_value'));
   assertEquals(true, $duckdbSQL->contains('TO_DATE(date_string, \'YYYY-MM-DD\') AS date_value'));
   assertEquals(true, $duckdbSQL->contains('TO_TIMESTAMP(timestamp_string, \'YYYY-MM-DD HH24:MI:SS\') AS timestamp_value'));
   
   assertEquals(true, $bigquerySQL->contains('CAST(value AS INTEGER) AS int_value'));
   assertEquals(true, $bigquerySQL->contains('CAST(string_value AS NUMERIC) AS numeric_value'));
   assertEquals(true, $bigquerySQL->contains('PARSE_DATE(\'YYYY-MM-DD\', date_string) AS date_value'));
   assertEquals(true, $bigquerySQL->contains('PARSE_TIMESTAMP(\'YYYY-MM-DD HH24:MI:SS\', timestamp_string) AS timestamp_value'));
   
   assertEquals(true, $databricksSQL->contains('CAST(value AS INTEGER) AS int_value'));
   assertEquals(true, $databricksSQL->contains('CAST(string_value AS DECIMAL(38, 10)) AS numeric_value'));
   assertEquals(true, $databricksSQL->contains('TO_DATE(date_string, \'YYYY-MM-DD\') AS date_value'));
   assertEquals(true, $databricksSQL->contains('TO_TIMESTAMP(timestamp_string, \'YYYY-MM-DD HH24:MI:SS\') AS timestamp_value'));
   
   assertEquals(true, $redshiftSQL->contains('CAST(value AS INTEGER) AS int_value'));
   assertEquals(true, $redshiftSQL->contains('TO_NUMBER(string_value) AS numeric_value'));
   assertEquals(true, $redshiftSQL->contains('TO_DATE(date_string, \'YYYY-MM-DD\') AS date_value'));
   assertEquals(true, $redshiftSQL->contains('TO_TIMESTAMP(timestamp_string, \'YYYY-MM-DD HH24:MI:SS\') AS timestamp_value'));
   
   assertEquals(true, $postgresSQL->contains('CAST(value AS INTEGER) AS int_value'));
   assertEquals(true, $postgresSQL->contains('TO_NUMBER(string_value) AS numeric_value'));
   assertEquals(true, $postgresSQL->contains('TO_DATE(date_string, \'YYYY-MM-DD\') AS date_value'));
   assertEquals(true, $postgresSQL->contains('TO_TIMESTAMP(timestamp_string, \'YYYY-MM-DD HH24:MI:SS\') AS timestamp_value'));
   
   true;
}

function <<test.Test>> meta::pure::dsl::tests::testNewMathFunctions(): Boolean[1]
{
   // Create a DataFrame with new math functions
   let df = select([
      round(col('value'), literal(2))->as('rounded_value'),
      ceiling(col('value'))->as('ceiling_value'),
      floor(col('value'))->as('floor_value'),
      log(col('value'))->as('log_value'),
      ln(col('value'))->as('ln_value'),
      mod(col('value'), literal(5))->as('mod_value')
   ])
   ->from(table('data'));
   
   // Test SQL generation across all supported databases
   let snowflakeSQL = $df->generateSnowflakeSQL();
   let duckdbSQL = $df->generateDuckDBSQL();
   let bigquerySQL = $df->generateBigQuerySQL();
   let databricksSQL = $df->generateDatabricksSQL();
   let redshiftSQL = $df->generateRedshiftSQL();
   let postgresSQL = $df->generatePostgresSQL();
   
   // Verify SQL contains expected syntax
   assertEquals(true, $snowflakeSQL->contains('ROUND(value, 2) AS rounded_value'));
   assertEquals(true, $snowflakeSQL->contains('CEILING(value) AS ceiling_value'));
   assertEquals(true, $snowflakeSQL->contains('FLOOR(value) AS floor_value'));
   assertEquals(true, $snowflakeSQL->contains('LOG(value) AS log_value'));
   assertEquals(true, $snowflakeSQL->contains('LN(value) AS ln_value'));
   assertEquals(true, $snowflakeSQL->contains('MOD(value, 5) AS mod_value'));
   
   assertEquals(true, $duckdbSQL->contains('ROUND(value, 2) AS rounded_value'));
   assertEquals(true, $duckdbSQL->contains('CEILING(value) AS ceiling_value'));
   assertEquals(true, $duckdbSQL->contains('FLOOR(value) AS floor_value'));
   assertEquals(true, $duckdbSQL->contains('LOG10(value) AS log_value'));
   assertEquals(true, $duckdbSQL->contains('LN(value) AS ln_value'));
   assertEquals(true, $duckdbSQL->contains('MOD(value, 5) AS mod_value'));
   
   assertEquals(true, $bigquerySQL->contains('ROUND(value, 2) AS rounded_value'));
   assertEquals(true, $bigquerySQL->contains('CEIL(value) AS ceiling_value'));
   assertEquals(true, $bigquerySQL->contains('FLOOR(value) AS floor_value'));
   assertEquals(true, $bigquerySQL->contains('LOG10(value) AS log_value'));
   assertEquals(true, $bigquerySQL->contains('LN(value) AS ln_value'));
   assertEquals(true, $bigquerySQL->contains('MOD(value, 5) AS mod_value'));
   
   assertEquals(true, $databricksSQL->contains('ROUND(value, 2) AS rounded_value'));
   assertEquals(true, $databricksSQL->contains('CEILING(value) AS ceiling_value'));
   assertEquals(true, $databricksSQL->contains('FLOOR(value) AS floor_value'));
   assertEquals(true, $databricksSQL->contains('LOG10(value) AS log_value'));
   assertEquals(true, $databricksSQL->contains('LN(value) AS ln_value'));
   assertEquals(true, $databricksSQL->contains('MOD(value, 5) AS mod_value'));
   
   assertEquals(true, $redshiftSQL->contains('ROUND(value, 2) AS rounded_value'));
   assertEquals(true, $redshiftSQL->contains('CEILING(value) AS ceiling_value'));
   assertEquals(true, $redshiftSQL->contains('FLOOR(value) AS floor_value'));
   assertEquals(true, $redshiftSQL->contains('LOG10(value) AS log_value'));
   assertEquals(true, $redshiftSQL->contains('LN(value) AS ln_value'));
   assertEquals(true, $redshiftSQL->contains('MOD(value, 5) AS mod_value'));
   
   assertEquals(true, $postgresSQL->contains('ROUND(value, 2) AS rounded_value'));
   assertEquals(true, $postgresSQL->contains('CEILING(value) AS ceiling_value'));
   assertEquals(true, $postgresSQL->contains('FLOOR(value) AS floor_value'));
   assertEquals(true, $postgresSQL->contains('LOG10(value) AS log_value'));
   assertEquals(true, $postgresSQL->contains('LN(value) AS ln_value'));
   assertEquals(true, $postgresSQL->contains('MOD(value, 5) AS mod_value'));
   
   true;
}

function <<test.Test>> meta::pure::dsl::tests::testNewDateFunctions(): Boolean[1]
{
   // Create a DataFrame with new date functions
   let df = select([
      currentDate()->as('today'),
      dateAdd(literal('day'), col('date_value'), literal(7))->as('date_plus_7_days'),
      dateSub(literal('month'), col('date_value'), literal(1))->as('date_minus_1_month')
   ])
   ->from(table('data'));
   
   // Test SQL generation across all supported databases
   let snowflakeSQL = $df->generateSnowflakeSQL();
   let duckdbSQL = $df->generateDuckDBSQL();
   let bigquerySQL = $df->generateBigQuerySQL();
   let databricksSQL = $df->generateDatabricksSQL();
   let redshiftSQL = $df->generateRedshiftSQL();
   let postgresSQL = $df->generatePostgresSQL();
   
   // Verify SQL contains expected syntax
   assertEquals(true, $snowflakeSQL->contains('CURRENT_DATE() AS today'));
   assertEquals(true, $snowflakeSQL->contains('DATEADD(\'day\', 7, date_value) AS date_plus_7_days'));
   assertEquals(true, $snowflakeSQL->contains('DATEADD(\'month\', -1, date_value) AS date_minus_1_month'));
   
   assertEquals(true, $duckdbSQL->contains('CURRENT_DATE() AS today'));
   assertEquals(true, $duckdbSQL->contains('DATEADD(\'day\', 7, date_value) AS date_plus_7_days'));
   assertEquals(true, $duckdbSQL->contains('DATEADD(\'month\', -1, date_value) AS date_minus_1_month'));
   
   assertEquals(true, $bigquerySQL->contains('CURRENT_DATE() AS today'));
   assertEquals(true, $bigquerySQL->contains('DATE_ADD(\'day\', date_value, 7) AS date_plus_7_days'));
   assertEquals(true, $bigquerySQL->contains('DATE_SUB(\'month\', date_value, 1) AS date_minus_1_month'));
   
   assertEquals(true, $databricksSQL->contains('CURRENT_DATE() AS today'));
   assertEquals(true, $databricksSQL->contains('DATE_ADD(\'day\', date_value, 7) AS date_plus_7_days'));
   assertEquals(true, $databricksSQL->contains('DATE_SUB(\'month\', date_value, 1) AS date_minus_1_month'));
   
   assertEquals(true, $redshiftSQL->contains('CURRENT_DATE() AS today'));
   assertEquals(true, $redshiftSQL->contains('DATEADD(\'day\', 7, date_value) AS date_plus_7_days'));
   assertEquals(true, $redshiftSQL->contains('DATEADD(\'month\', -1, date_value) AS date_minus_1_month'));
   
   assertEquals(true, $postgresSQL->contains('CURRENT_DATE() AS today'));
   assertEquals(true, $postgresSQL->contains('(date_value + CAST(7 day AS INTERVAL)) AS date_plus_7_days'));
   assertEquals(true, $postgresSQL->contains('(date_value - CAST(1 month AS INTERVAL)) AS date_minus_1_month'));
   
   true;
}

function <<test.Test>> meta::pure::dsl::tests::testNewStringFunctions(): Boolean[1]
{
   // Create a DataFrame with new string functions
   let df = select([
      left(col('name'), literal(3))->as('name_left_3'),
      right(col('name'), literal(3))->as('name_right_3'),
      split(col('full_name'), literal(' '))->as('name_parts'),
      regexpExtract(col('text'), literal('\\d+'))->as('extracted_numbers')
   ])
   ->from(table('users'));
   
   // Test SQL generation across all supported databases
   let snowflakeSQL = $df->generateSnowflakeSQL();
   let duckdbSQL = $df->generateDuckDBSQL();
   let bigquerySQL = $df->generateBigQuerySQL();
   let databricksSQL = $df->generateDatabricksSQL();
   let redshiftSQL = $df->generateRedshiftSQL();
   let postgresSQL = $df->generatePostgresSQL();
   
   // Verify SQL contains expected syntax
   assertEquals(true, $snowflakeSQL->contains('LEFT(name, 3) AS name_left_3'));
   assertEquals(true, $snowflakeSQL->contains('RIGHT(name, 3) AS name_right_3'));
   assertEquals(true, $snowflakeSQL->contains('SPLIT(full_name, \' \') AS name_parts'));
   assertEquals(true, $snowflakeSQL->contains('REGEXP_SUBSTR(text, \'\\d+\', 1, 1) AS extracted_numbers'));
   
   assertEquals(true, $duckdbSQL->contains('LEFT(name, 3) AS name_left_3'));
   assertEquals(true, $duckdbSQL->contains('RIGHT(name, 3) AS name_right_3'));
   assertEquals(true, $duckdbSQL->contains('STRING_SPLIT(full_name, \' \') AS name_parts'));
   assertEquals(true, $duckdbSQL->contains('REGEXP_EXTRACT(text, \'\\d+\') AS extracted_numbers'));
   
   assertEquals(true, $bigquerySQL->contains('LEFT(name, 3) AS name_left_3'));
   assertEquals(true, $bigquerySQL->contains('RIGHT(name, 3) AS name_right_3'));
   assertEquals(true, $bigquerySQL->contains('SPLIT(full_name, \' \') AS name_parts'));
   assertEquals(true, $bigquerySQL->contains('REGEXP_EXTRACT(text, \'\\d+\') AS extracted_numbers'));
   
   assertEquals(true, $databricksSQL->contains('LEFT(name, 3) AS name_left_3'));
   assertEquals(true, $databricksSQL->contains('RIGHT(name, 3) AS name_right_3'));
   assertEquals(true, $databricksSQL->contains('SPLIT(full_name, \' \') AS name_parts'));
   assertEquals(true, $databricksSQL->contains('REGEXP_EXTRACT(text, \'\\d+\') AS extracted_numbers'));
   
   assertEquals(true, $redshiftSQL->contains('LEFT(name, 3) AS name_left_3'));
   assertEquals(true, $redshiftSQL->contains('RIGHT(name, 3) AS name_right_3'));
   assertEquals(true, $redshiftSQL->contains('SPLIT_PART(full_name, \' \', 1) AS name_parts'));
   assertEquals(true, $redshiftSQL->contains('REGEXP_SUBSTR(text, \'\\d+\', 1, 1) AS extracted_numbers'));
   
   assertEquals(true, $postgresSQL->contains('LEFT(name, 3) AS name_left_3'));
   assertEquals(true, $postgresSQL->contains('RIGHT(name, 3) AS name_right_3'));
   assertEquals(true, $postgresSQL->contains('STRING_TO_ARRAY(full_name, \' \') AS name_parts'));
   assertEquals(true, $postgresSQL->contains('REGEXP_MATCHES(text, \'\\d+\')[1] AS extracted_numbers'));
   
   true;
}

function <<test.Test>> meta::pure::dsl::tests::testNestedNewFunctions(): Boolean[1]
{
   // Create a DataFrame with nested new functions
   let df = select([
      ceiling(round(col('value'), literal(2)))->as('ceiling_of_rounded'),
      coalesce(nullif(col('value'), literal(0)), literal(1))->as('safe_value'),
      left(upper(col('name')), literal(3))->as('upper_left_3')
   ])
   ->from(table('data'));
   
   // Test SQL generation across all supported databases
   let snowflakeSQL = $df->generateSnowflakeSQL();
   let duckdbSQL = $df->generateDuckDBSQL();
   let bigquerySQL = $df->generateBigQuerySQL();
   let databricksSQL = $df->generateDatabricksSQL();
   let redshiftSQL = $df->generateRedshiftSQL();
   let postgresSQL = $df->generatePostgresSQL();
   
   // Verify SQL contains expected nested function syntax
   assertEquals(true, $snowflakeSQL->contains('CEILING(ROUND(value, 2)) AS ceiling_of_rounded'));
   assertEquals(true, $snowflakeSQL->contains('COALESCE(NULLIF(value, 0), 1) AS safe_value'));
   assertEquals(true, $snowflakeSQL->contains('LEFT(UPPER(name), 3) AS upper_left_3'));
   
   assertEquals(true, $duckdbSQL->contains('CEILING(ROUND(value, 2)) AS ceiling_of_rounded'));
   assertEquals(true, $duckdbSQL->contains('COALESCE(NULLIF(value, 0), 1) AS safe_value'));
   assertEquals(true, $duckdbSQL->contains('LEFT(UPPER(name), 3) AS upper_left_3'));
   
   assertEquals(true, $bigquerySQL->contains('CEIL(ROUND(value, 2)) AS ceiling_of_rounded'));
   assertEquals(true, $bigquerySQL->contains('COALESCE(NULLIF(value, 0), 1) AS safe_value'));
   assertEquals(true, $bigquerySQL->contains('LEFT(UPPER(name), 3) AS upper_left_3'));
   
   assertEquals(true, $databricksSQL->contains('CEILING(ROUND(value, 2)) AS ceiling_of_rounded'));
   assertEquals(true, $databricksSQL->contains('COALESCE(NULLIF(value, 0), 1) AS safe_value'));
   assertEquals(true, $databricksSQL->contains('LEFT(UPPER(name), 3) AS upper_left_3'));
   
   assertEquals(true, $redshiftSQL->contains('CEILING(ROUND(value, 2)) AS ceiling_of_rounded'));
   assertEquals(true, $redshiftSQL->contains('COALESCE(NULLIF(value, 0), 1) AS safe_value'));
   assertEquals(true, $redshiftSQL->contains('LEFT(UPPER(name), 3) AS upper_left_3'));
   
   assertEquals(true, $postgresSQL->contains('CEILING(ROUND(value, 2)) AS ceiling_of_rounded'));
   assertEquals(true, $postgresSQL->contains('COALESCE(NULLIF(value, 0), 1) AS safe_value'));
   assertEquals(true, $postgresSQL->contains('LEFT(UPPER(name), 3) AS upper_left_3'));
   
   true;
}
