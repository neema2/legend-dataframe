// Copyright 2025 Neema Raphael
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::dsl::dataframe::*;
import meta::pure::dsl::dataframe::metamodel::*;
import meta::pure::dsl::dataframe::metamodel::column::*;
import meta::pure::dsl::duckdb::*;

/**
 * DuckDB SQL generator for the DataFrame DSL
 * This module provides functions to convert DataFrame objects to DuckDB SQL syntax
 */

// Main function to generate DuckDB SQL from a DataFrame
function meta::pure::dsl::duckdb::generateDuckDBSQL(df: DataFrame[1]): String[1]
{
   $df->generateWithClause() + 
   $df->generateSelectClause() + 
   $df->generateFromClause() + 
   $df->generateWhereClause() + 
   $df->generateGroupByClause() + 
   $df->generateHavingClause() + 
   $df->generateOrderByClause() + 
   $df->generateLimitOffsetClause()
}

// Generate the WITH clause
function <<access.private>> meta::pure::dsl::duckdb::generateWithClause(df: DataFrame[1]): String[1]
{
   if($df.ctes->isEmpty(),
      '',
      'WITH ' + 
      if($df.ctes->exists(c | $c.recursive == true), 'RECURSIVE ', '') +
      $df.ctes->map(c | 
         $c.name + 
         if($c.columns->isEmpty(), '', '(' + $c.columns->joinStrings(', ') + ')') + 
         ' AS (' + $c.dataFrame->generateDuckDBSQL() + ')'
      )->joinStrings(', ') + '\n'
   )
}

// Generate the SELECT clause
function <<access.private>> meta::pure::dsl::duckdb::generateSelectClause(df: DataFrame[1]): String[1]
{
   'SELECT ' + if($df.distinct == true, 'DISTINCT ', '') + 
   if($df.columns->isEmpty(), 
      '*', 
      $df.columns->map(c | $c.expression->generateDuckDBExpression() + if($c.alias->isNotEmpty(), ' AS ' + $c.alias->toOne(), ''))->joinStrings(', '))
}

// Generate the FROM clause
function <<access.private>> meta::pure::dsl::duckdb::generateFromClause(df: DataFrame[1]): String[1]
{
   if($df.source->isEmpty(), 
      '', 
      '\nFROM ' + $df.source->toOne()->generateDuckDBDataSource())
}

// Generate the WHERE clause
function <<access.private>> meta::pure::dsl::duckdb::generateWhereClause(df: DataFrame[1]): String[1]
{
   if($df.filter->isEmpty(), 
      '', 
      '\nWHERE ' + $df.filter->toOne()->generateDuckDBExpression())
}

// Generate the GROUP BY clause
function <<access.private>> meta::pure::dsl::duckdb::generateGroupByClause(df: DataFrame[1]): String[1]
{
   if($df.groupBy->isEmpty(),
      '',
      '\nGROUP BY ' + 
      if($df.groupBy.sets->isNotEmpty(),
         'GROUPING SETS (' + 
         $df.groupBy.sets->map(s | '(' + $s.expressions->map(e | $e->generateDuckDBExpression())->joinStrings(', ') + ')')
            ->joinStrings(', ') + ')',
         if($df.groupBy.type == GroupByType.CUBE,
            'CUBE (' + $df.groupBy.columns->map(c | $c->generateDuckDBExpression())->joinStrings(', ') + ')',
            if($df.groupBy.type == GroupByType.ROLLUP,
               'ROLLUP (' + $df.groupBy.columns->map(c | $c->generateDuckDBExpression())->joinStrings(', ') + ')',
               $df.groupBy.columns->map(c | $c->generateDuckDBExpression())->joinStrings(', ')))))
}

// Generate the HAVING clause
function <<access.private>> meta::pure::dsl::duckdb::generateHavingClause(df: DataFrame[1]): String[1]
{
   if($df.having->isEmpty(), 
      '', 
      '\nHAVING ' + $df.having->toOne()->generateDuckDBExpression())
}

// Generate the ORDER BY clause
function <<access.private>> meta::pure::dsl::duckdb::generateOrderByClause(df: DataFrame[1]): String[1]
{
   if($df.orderBy->isEmpty(), 
      '', 
      '\nORDER BY ' + $df.orderBy->map(o | $o.expression->generateDuckDBExpression() + ' ' + $o.direction->toString())->joinStrings(', '))
}

// Generate the LIMIT and OFFSET clauses
function <<access.private>> meta::pure::dsl::duckdb::generateLimitOffsetClause(df: DataFrame[1]): String[1]
{
   let limitClause = if($df.limit->isEmpty(), '', '\nLIMIT ' + $df.limit->toOne()->toString());
   let offsetClause = if($df.offset->isEmpty(), '', '\nOFFSET ' + $df.offset->toOne()->toString());
   $limitClause + $offsetClause;
}

// Generate SQL for a data source
function <<access.private>> meta::pure::dsl::duckdb::generateDuckDBDataSource(source: DataSource[1]): String[1]
{
   $source->match([
      t: TableReference[1] | if($t.schema->isNotEmpty(), $t.schema->toOne() + '.', '') + $t.tableName + if($t.alias->isNotEmpty(), ' AS ' + $t.alias->toOne(), ''),
      j: JoinOperation[1] | $j.left->generateDuckDBDataSource() + ' ' + $j.joinType->generateDuckDBJoinType() + ' ' + $j.right->generateDuckDBDataSource() + ' ON ' + $j.condition->generateDuckDBExpression(),
      s: SubquerySource[1] | '(' + $s.dataFrame->generateDuckDBSQL() + ') AS ' + $s.alias,
      l: LateralJoinOperation[1] | $l.left->generateDuckDBDataSource() + ' ' + 
         $l.joinType->generateDuckDBJoinType() + ' LATERAL ' + 
         '(' + $l.right.dataFrame->generateDuckDBSQL() + ') AS ' + $l.right.alias +
         if($l.condition->isEmpty(), '', ' ON ' + $l.condition->toOne()->generateDuckDBExpression()),
      p: PivotClause[1] | $p.source->generateDuckDBDataSource() + 
         ' PIVOT(' + $p.valueColumn->generateDuckDBExpression() + ' FOR ' + 
         $p.pivotColumn->generateDuckDBExpression() + ' IN (' + 
         $p.pivotValues->map(v | $v->generateDuckDBExpression())->joinStrings(', ') + 
         '))' + if($p.alias->isNotEmpty(), ' AS ' + $p.alias->toOne(), ''),
      u: UnpivotClause[1] | $u.source->generateDuckDBDataSource() + 
         ' UNPIVOT(' + $u.valueColumn + ' FOR ' + $u.nameColumn + ' IN (' + 
         $u.valueColumns->map(c | $c->generateDuckDBExpression())->joinStrings(', ') + 
         '))' + if($u.alias->isNotEmpty(), ' AS ' + $u.alias->toOne(), ''),
      d: DataSource[1] | 'UNKNOWN_SOURCE_TYPE'
   ])
}

// Generate SQL for join types
function <<access.private>> meta::pure::dsl::duckdb::generateDuckDBJoinType(joinType: JoinType[1]): String[1]
{
   $joinType->match([
      JoinType.INNER | 'INNER JOIN',
      JoinType.LEFT_OUTER | 'LEFT JOIN',
      JoinType.RIGHT_OUTER | 'RIGHT JOIN',
      JoinType.FULL_OUTER | 'FULL JOIN',
      JoinType.CROSS | 'CROSS JOIN'
   ])
}

// Generate SQL for expressions
function <<access.private>> meta::pure::dsl::duckdb::generateDuckDBExpression(expr: Expression[1]): String[1]
{
   $expr->match([
      l: LiteralExpression[1] | $l.value->generateDuckDBLiteral(),
      c: ColumnReference[1] | if($c.tableAlias->isNotEmpty(), $c.tableAlias->toOne() + '.', '') + $c.columnName,
      f: FunctionExpression[1] | $f->generateDuckDBFunction(),
      b: BinaryOperation[1] | '(' + $b.left->generateDuckDBExpression() + ' ' + $b.operator->generateDuckDBBinaryOperator() + ' ' + $b.right->generateDuckDBExpression() + ')',
      u: UnaryOperation[1] | $u.operator->generateDuckDBUnaryOperator() + '(' + $u.expression->generateDuckDBExpression() + ')',
      e: Expression[1] | 'UNKNOWN_EXPRESSION_TYPE'
   ])
}

// Generate SQL for function expressions
function <<access.private>> meta::pure::dsl::duckdb::generateDuckDBFunction(func: FunctionExpression[1]): String[1]
{
   $func->match([
      c: CountFunction[1] | 'COUNT(' + if($c.distinct == true, 'DISTINCT ', '') + $c.parameters->map(p | $p->generateDuckDBExpression())->joinStrings(', ') + ')',
      a: AggregateFunction[1] | $a.functionName->toUpperCase() + '(' + $a.parameters->map(p | $p->generateDuckDBExpression())->joinStrings(', ') + ')',
      f: FunctionExpression[1] | $f.functionName + '(' + $f.parameters->map(p | $p->generateDuckDBExpression())->joinStrings(', ') + ')'
   ])
}

// Generate SQL for type-safe column specifications
function <<access.private>> meta::pure::dsl::duckdb::generateSQLFromColSpec<T>(colSpec: ColSpec<T>[1]): String[1]
{
   // For DuckDB, quoted identifiers use double quotes
   if($colSpec.name->contains(' '), 
      '"' + $colSpec.name + '"', 
      $colSpec.name
   );
}

function <<access.private>> meta::pure::dsl::duckdb::generateSQLFromColSpecArray<T>(colSpecs: ColSpecArray<T>[1]): String[1]
{
   // Handle column names with spaces by quoting them
   $colSpecs.names->map(n | if($n->contains(' '), '"' + $n + '"', $n))->joinStrings(', ');
}

function <<access.private>> meta::pure::dsl::duckdb::generateSQLFromFuncColSpec<F, Z>(funcColSpec: FuncColSpec<F, Z>[1]): String[1]
{
   $funcColSpec.name;
}

function <<access.private>> meta::pure::dsl::duckdb::generateSQLFromAggColSpec<K, V, R>(aggColSpec: AggColSpec<K, V, R>[1]): String[1]
{
   let funcName = if($aggColSpec.name->startsWith('sum_'), 'SUM',
                  if($aggColSpec.name->startsWith('avg_'), 'AVG',
                  if($aggColSpec.name->startsWith('min_'), 'MIN',
                  if($aggColSpec.name->startsWith('max_'), 'MAX', 'UNKNOWN'))));
   
   let colName = $aggColSpec.name->substring($aggColSpec.name->indexOf('_') + 1, $aggColSpec.name->length());
   
   $funcName + '(' + $colName + ')';
}

function <<access.private>> meta::pure::dsl::duckdb::generateSQLFromWindowSpec(windowSpec: WindowSpec[1]): String[1]
{
   let partitionBy = if($windowSpec.partitionBy->isEmpty(), 
                       '', 
                       'PARTITION BY ' + $windowSpec.partitionBy->joinStrings(', '));
   
   let orderBy = if($windowSpec.orderBy->isEmpty(), 
                    '', 
                    if($partitionBy->isEmpty(), '', ' ') + 
                    'ORDER BY ' + $windowSpec.orderBy->joinStrings(', '));
   
   $partitionBy + $orderBy;
}

// Generate SQL for binary operators
function <<access.private>> meta::pure::dsl::duckdb::generateDuckDBBinaryOperator(op: BinaryOperator[1]): String[1]
{
   $op->match([
      BinaryOperator.EQUALS | '=',
      BinaryOperator.NOT_EQUALS | '!=',
      BinaryOperator.GREATER_THAN | '>',
      BinaryOperator.LESS_THAN | '<',
      BinaryOperator.GREATER_THAN_OR_EQUALS | '>=',
      BinaryOperator.LESS_THAN_OR_EQUALS | '<=',
      BinaryOperator.AND | 'AND',
      BinaryOperator.OR | 'OR',
      BinaryOperator.LIKE | 'LIKE',
      BinaryOperator.IN | 'IN',
      BinaryOperator.NOT_IN | 'NOT IN',
      BinaryOperator.IS_NULL | 'IS NULL',
      BinaryOperator.IS_NOT_NULL | 'IS NOT NULL'
   ])
}

// Generate SQL for unary operators
function <<access.private>> meta::pure::dsl::duckdb::generateDuckDBUnaryOperator(op: UnaryOperator[1]): String[1]
{
   $op->match([
      UnaryOperator.NOT | 'NOT '
   ])
}

// Generate SQL for literal values
function <<access.private>> meta::pure::dsl::duckdb::generateDuckDBLiteral(value: Any[1]): String[1]
{
   $value->match([
      s: String[1] | '\'' + $s->replace('\'', '\'\'') + '\'',
      i: Integer[1] | $i->toString(),
      f: Float[1] | $f->toString(),
      b: Boolean[1] | if($b, 'TRUE', 'FALSE'),
      d: Date[1] | 'DATE \'' + $d->toString() + '\'',
      n: Nil[1] | 'NULL',
      a: Any[1] | $a->toString()
   ])
}
