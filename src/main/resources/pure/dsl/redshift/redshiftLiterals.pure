// Copyright 2025 Neema Raphael
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::dsl::dataframe::*;
import meta::pure::dsl::dataframe::metamodel::*;
import meta::pure::dsl::redshift::*;

/**
 * Redshift SQL literal generators
 */

// Generate SQL for literal values
function <<access.private>> meta::pure::dsl::redshift::generateRedshiftLiteral(value: Any[1]): String[1]
{
   $value->match([
      s: String[1] | '\'' + $s->replace('\'', '\'\'') + '\'',
      i: Integer[1] | $i->toString(),
      f: Float[1] | $f->toString(),
      b: Boolean[1] | if($b, 'TRUE', 'FALSE'),
      d: Date[1] | 'DATE \'' + $d->toString() + '\'',
      n: Nil[1] | 'NULL',
      a: Any[1] | $a->toString()
   ])
}

// Generate SQL for binary operators
function <<access.private>> meta::pure::dsl::redshift::generateRedshiftBinaryOperator(op: BinaryOperator[1]): String[1]
{
   $op->match([
      BinaryOperator.EQUALS | '=',
      BinaryOperator.NOT_EQUALS | '!=',
      BinaryOperator.GREATER_THAN | '>',
      BinaryOperator.LESS_THAN | '<',
      BinaryOperator.GREATER_THAN_OR_EQUALS | '>=',
      BinaryOperator.LESS_THAN_OR_EQUALS | '<=',
      BinaryOperator.AND | 'AND',
      BinaryOperator.OR | 'OR',
      BinaryOperator.LIKE | 'LIKE',
      BinaryOperator.IN | 'IN',
      BinaryOperator.NOT_IN | 'NOT IN',
      BinaryOperator.IS_NULL | 'IS NULL',
      BinaryOperator.IS_NOT_NULL | 'IS NOT NULL'
   ])
}

// Generate SQL for unary operators
function <<access.private>> meta::pure::dsl::redshift::generateRedshiftUnaryOperator(op: UnaryOperator[1]): String[1]
{
   $op->match([
      UnaryOperator.NOT | 'NOT '
   ])
}
