// Copyright 2025 Neema Raphael
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::dsl::dataframe::*;
import meta::pure::dsl::dataframe::metamodel::*;
import meta::pure::dsl::dataframe::metamodel::column::*;
import meta::pure::dsl::bigquery::*;

/**
 * Type-safe column specifications for BigQuery SQL generation
 */

// Generate SQL for type-safe column specifications
function <<access.private>> meta::pure::dsl::bigquery::generateSQLFromColSpec<T>(colSpec: ColSpec<T>[1]): String[1]
{
   // For BigQuery, quoted identifiers use backticks
   if($colSpec.name->contains(' '), 
      '`' + $colSpec.name + '`', 
      $colSpec.name
   );
}

function <<access.private>> meta::pure::dsl::bigquery::generateSQLFromColSpecArray<T>(colSpecs: ColSpecArray<T>[1]): String[1]
{
   // Handle column names with spaces by quoting them
   $colSpecs.names->map(n | if($n->contains(' '), '`' + $n + '`', $n))->joinStrings(', ');
}

function <<access.private>> meta::pure::dsl::bigquery::generateSQLFromFuncColSpec<F, Z>(funcColSpec: FuncColSpec<F, Z>[1]): String[1]
{
   $funcColSpec.name;
}

function <<access.private>> meta::pure::dsl::bigquery::generateSQLFromAggColSpec<K, V, R>(aggColSpec: AggColSpec<K, V, R>[1]): String[1]
{
   let funcName = if($aggColSpec.name->startsWith('sum_'), 'SUM',
                  if($aggColSpec.name->startsWith('avg_'), 'AVG',
                  if($aggColSpec.name->startsWith('min_'), 'MIN',
                  if($aggColSpec.name->startsWith('max_'), 'MAX',
                  if($aggColSpec.name->startsWith('count_'), 'COUNT', 'UNKNOWN')))));
   
   let colName = $aggColSpec.name->substring($aggColSpec.name->indexOf('_') + 1, $aggColSpec.name->length());
   
   $funcName + '(' + $colName + ')';
}

function <<access.private>> meta::pure::dsl::bigquery::generateSQLFromWindowSpec(windowSpec: WindowSpec[1]): String[1]
{
   let partitionBy = if($windowSpec.partitionBy->isEmpty(), 
                      '', 
                      'PARTITION BY ' + $windowSpec.partitionBy->joinStrings(', '));
   
   let orderBy = if($windowSpec.orderBy->isEmpty(), 
                   '', 
                   if($partitionBy->isEmpty(), '', ' ') + 
                   'ORDER BY ' + $windowSpec.orderBy->joinStrings(', '));
   
   $partitionBy + $orderBy;
}
