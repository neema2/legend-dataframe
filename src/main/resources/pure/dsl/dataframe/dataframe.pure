// Copyright 2025 Neema Raphael
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::dsl::dataframe::*;
import meta::pure::dsl::dataframe::metamodel::*;
import meta::pure::dsl::dataframe::metamodel::column::*;

/**
 * Core DataFrame DSL for modeling SQL SELECT statements
 * This DSL provides a unified interface for creating SQL queries that can be
 * executed against both Snowflake and DuckDB databases.
 */

// Core DataFrame metamodel
Class meta::pure::dsl::dataframe::metamodel::DataFrame
{
   columns : Column[*];
   source : DataSource[0..1];
   filter : FilterCondition[0..1];
   groupBy : GroupByClause[0..1];
   having : FilterCondition[0..1];
   orderBy : OrderByClause[*];
   limit : Integer[0..1];
   offset : Integer[0..1];
   distinct : Boolean[0..1];
   ctes : CommonTableExpression[*];
   
   // Properties for Snowflake features
   pivot : PivotClause[0..1];
   unpivot : UnpivotClause[0..1];
   matchRecognize : MatchRecognizeClause[0..1];
   sample : SampleClause[0..1];
   qualify : QualifyClause[0..1];
   at : AtClause[0..1];
   changes : ChangesClause[0..1];
   connectBy : ConnectByClause[0..1];
   
   // Properties for BigQuery features
   differentialPrivacy : DifferentialPrivacyClause[0..1];
   aggregationThreshold : AggregationThresholdClause[0..1];
   structOutput : Boolean[0..1];
   valueOutput : Boolean[0..1];
   exceptColumns : String[*];
   replaceColumns : Map<String, Expression>[0..1];
   
   // Properties for Databricks features
   clusterBy : Column[*];
}

// Column representation
Class meta::pure::dsl::dataframe::metamodel::Column
{
   name : String[1];
   expression : Expression[1];
   alias : String[0..1];
}

// Abstract base class for all expressions
Class meta::pure::dsl::dataframe::metamodel::Expression
{
}

// Literal value expression
Class meta::pure::dsl::dataframe::metamodel::LiteralExpression extends Expression
{
   value : Any[1];
}

// Column reference expression
Class meta::pure::dsl::dataframe::metamodel::ColumnReference extends Expression
{
   colSpec : ColSpec<Any>[1];
   tableAlias : String[0..1];
}

// Function call expression
Class meta::pure::dsl::dataframe::metamodel::FunctionExpression extends Expression
{
   functionName : String[1];
   parameters : Expression[*];
}

// Data source (table, subquery, etc.)
Class meta::pure::dsl::dataframe::metamodel::DataSource
{
}

// Table reference
Class meta::pure::dsl::dataframe::metamodel::TableReference extends DataSource
{
   tableName : String[1];
   schema : String[0..1];
   alias : String[0..1];
}

// Join operation
Class meta::pure::dsl::dataframe::metamodel::JoinOperation extends DataSource
{
   left : DataSource[1];
   right : DataSource[1];
   joinType : JoinType[1];
   condition : FilterCondition[1];
}

// Join types
Enum meta::pure::dsl::dataframe::metamodel::JoinType
{
   INNER,
   LEFT_OUTER,
   RIGHT_OUTER,
   FULL_OUTER,
   CROSS
}

// Common Table Expression (CTE) for WITH clause
Class meta::pure::dsl::dataframe::metamodel::CommonTableExpression
{
   name : String[1];
   columns : String[*];
   query : Any[1]; // Can be DataFrame or String
   isRecursive : Boolean[0..1];
}

// Subquery as a data source
Class meta::pure::dsl::dataframe::metamodel::SubquerySource extends DataSource
{
   dataFrame : DataFrame[1];
   alias : String[1];
}

// Filter condition
Class meta::pure::dsl::dataframe::metamodel::FilterCondition extends Expression
{
}

// Binary operation (e.g., =, >, <, etc.)
Class meta::pure::dsl::dataframe::metamodel::BinaryOperation extends FilterCondition
{
   left : Expression[1];
   operator : BinaryOperator[1];
   right : Expression[1];
}

// Binary operators
Enum meta::pure::dsl::dataframe::metamodel::BinaryOperator
{
   EQUALS,
   NOT_EQUALS,
   GREATER_THAN,
   LESS_THAN,
   GREATER_THAN_OR_EQUALS,
   LESS_THAN_OR_EQUALS,
   AND,
   OR,
   LIKE,
   IN,
   NOT_IN,
   IS_NULL,
   IS_NOT_NULL
}

// Unary operation (e.g., NOT)
Class meta::pure::dsl::dataframe::metamodel::UnaryOperation extends FilterCondition
{
   operator : UnaryOperator[1];
   expression : Expression[1];
}

// Unary operators
Enum meta::pure::dsl::dataframe::metamodel::UnaryOperator
{
   NOT
}

// Group by clause
Class meta::pure::dsl::dataframe::metamodel::GroupByClause
{
   columns : Expression[*];
}

// Order by clause
Class meta::pure::dsl::dataframe::metamodel::OrderByClause
{
   expression : Expression[1];
   direction : SortDirection[1];
}

// Sort direction
Enum meta::pure::dsl::dataframe::metamodel::SortDirection
{
   ASC,
   DESC
}

// Supported database types
Enum meta::pure::dsl::dataframe::Database
{
   SNOWFLAKE,
   DUCKDB,
   BIGQUERY,
   DATABRICKS,
   REDSHIFT
}

// Tilde notation functions for column references
function meta::pure::dsl::dataframe::~(name:String[1]):ColSpec<Any>[1]
{
    ^ColSpec<Any>(name=$name);
}

function meta::pure::dsl::dataframe::~(names:String[*]):ColSpecArray<Any>[1]
{
    ^ColSpecArray<Any>(names=$names);
}

// Tilde notation for table aliases
function meta::pure::dsl::dataframe::~(tableName: String[1], columnName: String[1]): ColumnReference[1]
{
   ^ColumnReference(colSpec = ^ColSpec<Any>(name = $columnName), tableAlias = $tableName)
}

// Table-aware tilde notation for single column reference
function meta::pure::dsl::dataframe::~<T>(schema: TableSchema<T>[1], name: String[1]): ColSpec<T>[1]
{
   // Validate column exists in schema
   if($schema.columns->containsKey($name),
      ^ColSpec<T>(name = $name, tableSchema = $schema),
      error('Column "' + $name + '" not found in table schema "' + $schema.name + '"')
   );
}

// Tilde notation for quoted column names (with spaces)
function meta::pure::dsl::dataframe::~<T>(schema: TableSchema<T>[1], name: String[1], quoted: Boolean[1]): ColSpec<T>[1]
{
   if($quoted, 
      // For quoted names, we don't need to look up directly
      ^ColSpec<T>(name = $name, tableSchema = $schema),
      // For unquoted names, validate it exists
      if($schema.columns->containsKey($name),
         ^ColSpec<T>(name = $name, tableSchema = $schema),
         error('Column "' + $name + '" not found in table schema "' + $schema.name + '"')
      )
   );
}

// Tilde notation for multiple column references
function meta::pure::dsl::dataframe::~<T>(schema: TableSchema<T>[1], names: String[*]): ColSpecArray<T>[1]
{
   // Validate all columns exist in schema
   let invalidColumns = $names->filter(n | !$schema.columns->containsKey($n));
   if($invalidColumns->isEmpty(),
      ^ColSpecArray<T>(names = $names, tableSchema = $schema),
      error('Columns [' + $invalidColumns->joinStrings(', ') + '] not found in table schema "' + $schema.name + '"')
   );
}

// Aggregate functions
Class meta::pure::dsl::dataframe::metamodel::AggregateFunction extends FunctionExpression
{
}

// Common aggregate functions
Class meta::pure::dsl::dataframe::metamodel::CountFunction extends AggregateFunction
{
   distinct : Boolean[0..1];
}

Class meta::pure::dsl::dataframe::metamodel::SumFunction extends AggregateFunction
{
}

Class meta::pure::dsl::dataframe::metamodel::AvgFunction extends AggregateFunction
{
}

Class meta::pure::dsl::dataframe::metamodel::MinFunction extends AggregateFunction
{
}

Class meta::pure::dsl::dataframe::metamodel::MaxFunction extends AggregateFunction
{
}

// Window function classes
Class meta::pure::dsl::dataframe::metamodel::WindowFunction extends FunctionExpression
{
   window : Window[1];
}

Class meta::pure::dsl::dataframe::metamodel::Window
{
   partitionBy : Expression[*];
   orderBy : OrderByClause[*];
   frame : Frame[0..1];
}

Enum meta::pure::dsl::dataframe::metamodel::WindowFrameType
{
   ROWS,
   RANGE
}

Class meta::pure::dsl::dataframe::metamodel::WindowFrameBound
{
   type : WindowFrameBoundType[1];
   offset : Integer[0..1];
}

Enum meta::pure::dsl::dataframe::metamodel::WindowFrameBoundType
{
   UNBOUNDED_PRECEDING,
   PRECEDING,
   CURRENT_ROW,
   FOLLOWING,
   UNBOUNDED_FOLLOWING
}

// Specialized window functions
Class meta::pure::dsl::dataframe::metamodel::RowNumberFunction extends WindowFunction
{
}

Class meta::pure::dsl::dataframe::metamodel::RankFunction extends WindowFunction
{
}

Class meta::pure::dsl::dataframe::metamodel::DenseRankFunction extends WindowFunction
{
}

Class meta::pure::dsl::dataframe::metamodel::LeadLagFunction extends WindowFunction
{
   offset : Expression[0..1];
   defaultValue : Expression[0..1];
   ignoreNulls : Boolean[0..1];
}

Class meta::pure::dsl::dataframe::metamodel::FirstLastValueFunction extends WindowFunction
{
   ignoreNulls : Boolean[0..1];
}

Class meta::pure::dsl::dataframe::metamodel::AggregateWindowFunction extends WindowFunction
{
}

// Factory functions for creating DataFrame objects
function meta::pure::dsl::dataframe::newDataFrame(): DataFrame[1]
{
   ^DataFrame(columns = [], distinct = false)
}

// Type-safe select functions
function meta::pure::dsl::dataframe::select<T>(cols: ColSpecArray<T>[1]): DataFrame[1]
{
   // Create columns from ColSpecArray
   let columns = $cols.names->map(n | ^Column(name = $n, expression = ^ColumnReference(colSpec = ^ColSpec<T>(name = $n, tableSchema = $cols.tableSchema)), alias = $n));
   
   ^DataFrame(columns = $columns, distinct = false);
}

function meta::pure::dsl::dataframe::select<T>(col: ColSpec<T>[1]): DataFrame[1]
{
   // Create column from ColSpec
   let column = ^Column(name = $col.name, expression = ^ColumnReference(colSpec = $col), alias = $col.name);
   
   ^DataFrame(columns = [$column], distinct = false);
}

function meta::pure::dsl::dataframe::select(columns: Column[*]): DataFrame[1]
{
   ^DataFrame(columns = $columns, distinct = false)
}

// Type-safe selectDistinct functions
function meta::pure::dsl::dataframe::selectDistinct<T>(cols: ColSpecArray<T>[1]): DataFrame[1]
{
   // Create columns from ColSpecArray
   let columns = $cols.names->map(n | ^Column(name = $n, expression = ^ColumnReference(colSpec = ^ColSpec<T>(name = $n, tableSchema = $cols.tableSchema)), alias = $n));
   
   ^DataFrame(columns = $columns, distinct = true);
}

function meta::pure::dsl::dataframe::selectDistinct<T>(col: ColSpec<T>[1]): DataFrame[1]
{
   // Create column from ColSpec
   let column = ^Column(name = $col.name, expression = ^ColumnReference(colSpec = $col), alias = $col.name);
   
   ^DataFrame(columns = [$column], distinct = true);
}

function meta::pure::dsl::dataframe::selectDistinct(columns: Column[*]): DataFrame[1]
{
   ^DataFrame(columns = $columns, distinct = true)
}

function meta::pure::dsl::dataframe::from(df: DataFrame[1], source: DataSource[1]): DataFrame[1]
{
   ^$df(source = $source)
}

/**
 * Type-safe filter function that takes a lambda expression. 
 * Use Pure language built-ins for comparisons within the lambda instead of custom operators.
 * Examples:
 * - $df->filter({x | $x.salary > 50000})           // Greater than
 * - $df->filter({x | $x.name == 'John'})           // Equals
 * - $df->filter({x | $x.age != 30})                // Not equals
 * - $df->filter({x | $x.dept == 'HR' && $x.age > 40}) // AND condition
 * - $df->filter({x | $x.region == 'East' || $x.status == 'Active'}) // OR condition
 */
function meta::pure::dsl::dataframe::filter<T>(df: DataFrame[1], condition: Function<{T[1]->Boolean[1]}>[1]): DataFrame[1]
{
   ^$df(filter = $condition)
}

// Type-safe filter function with table schema validation
function meta::pure::dsl::dataframe::filter<T>(df: DataFrame[1], tableSchema: TableSchema<T>[1], condition: Function<{T[1]->Boolean[1]}>[1]): DataFrame[1]
{
   // Validate condition against table schema
   ^$df(filter = $condition)
}

// where() function has been removed in favor of filter()

// Type-safe groupBy functions
function meta::pure::dsl::dataframe::groupBy<T, Z>(df: DataFrame[1], cols: ColSpecArray<Z>[1]): DataFrame[1]
{
   // Create column references from ColSpecArray
   let colRefs = $cols.names->map(n | ^ColumnReference(colSpec = ^ColSpec<Z>(name = $n, tableSchema = $cols.tableSchema)));
   
   ^$df(groupBy = ^GroupByClause(columns = $colRefs));
}

function meta::pure::dsl::dataframe::groupBy<T, Z>(df: DataFrame[1], col: ColSpec<Z>[1]): DataFrame[1]
{
   // Create column reference
   let colRef = ^ColumnReference(colSpec = $col);
   
   ^$df(groupBy = ^GroupByClause(columns = [$colRef]));
}

// Type-safe groupBy function with table schema validation
function meta::pure::dsl::dataframe::groupBy<T, Z>(df: DataFrame[1], tableSchema: TableSchema<T>[1], cols: ColSpecArray<Z>[1]): DataFrame[1]
{
   // Validate columns against table schema
   let invalidColumns = $cols.names->filter(n | !$tableSchema.columns->containsKey($n));
   if($invalidColumns->isEmpty(),
      {
         // Create column references from ColSpecArray
         let colRefs = $cols.names->map(n | ^ColumnReference(colSpec = ^ColSpec<Any>(name = $n)));
         
         ^$df(groupBy = ^GroupByClause(columns = $colRefs));
      },
      error('Columns [' + $invalidColumns->joinStrings(', ') + '] not found in table schema "' + $tableSchema.name + '"')
   );
}

function meta::pure::dsl::dataframe::groupBy(df: DataFrame[1], columns: Expression[*]): DataFrame[1]
{
   ^$df(groupBy = ^GroupByClause(columns = $columns))
}

function meta::pure::dsl::dataframe::having(df: DataFrame[1], condition: FilterCondition[1]): DataFrame[1]
{
   ^$df(having = $condition)
}

// Type-safe orderBy functions
function meta::pure::dsl::dataframe::orderBy<T, Z>(df: DataFrame[1], cols: ColSpecArray<Z>[1], desc: Boolean[0..1]): DataFrame[1]
{
   let direction = if($desc->isNotEmpty() && $desc->toOne(), |SortDirection.DESC, |SortDirection.ASC);
   let clauses = $cols.names->map(n | ^OrderByClause(
      expression = ^ColumnReference(colSpec = ^ColSpec<Z>(name = $n, tableSchema = $cols.tableSchema)),
      direction = $direction
   ));
   ^$df(orderBy = $clauses);
}

function meta::pure::dsl::dataframe::orderBy<T, Z>(df: DataFrame[1], col: ColSpec<Z>[1], desc: Boolean[0..1]): DataFrame[1]
{
   let direction = if($desc->isNotEmpty() && $desc->toOne(), |SortDirection.DESC, |SortDirection.ASC);
   let clause = ^OrderByClause(
      expression = ^ColumnReference(colSpec = $col),
      direction = $direction
   );
   ^$df(orderBy = [$clause]);
}

// Type-safe orderBy function with table schema validation
function meta::pure::dsl::dataframe::orderBy<T, Z>(df: DataFrame[1], tableSchema: TableSchema<T>[1], cols: ColSpecArray<Z>[1], desc: Boolean[0..1]): DataFrame[1]
{
   // Validate columns against table schema
   let invalidColumns = $cols.names->filter(n | !$tableSchema.columns->containsKey($n));
   if($invalidColumns->isEmpty(),
      {
         let direction = if($desc->isNotEmpty() && $desc->toOne(), |SortDirection.DESC, |SortDirection.ASC);
         let clauses = $cols.names->map(n | ^OrderByClause(
            expression = ^ColumnReference(colSpec = ^ColSpec<Z>(name = $n, tableSchema = $cols.tableSchema)),
            direction = $direction
          ));
          ^$df(orderBy = $clauses);
      },
      error('Columns [' + $invalidColumns->joinStrings(', ') + '] not found in table schema "' + $tableSchema.name + '"')
   );
}

function meta::pure::dsl::dataframe::orderBy(df: DataFrame[1], clauses: OrderByClause[*]): DataFrame[1]
{
   ^$df(orderBy = $clauses)
}

function meta::pure::dsl::dataframe::limit(df: DataFrame[1], limit: Integer[1]): DataFrame[1]
{
   ^$df(limit = $limit)
}

function meta::pure::dsl::dataframe::offset(df: DataFrame[1], offset: Integer[1]): DataFrame[1]
{
   ^$df(offset = $offset)
}

// Helper functions for creating expressions
// col() functions have been removed in favor of tilde notation

function meta::pure::dsl::dataframe::literal(value: Any[1]): LiteralExpression[1]
{
   ^LiteralExpression(value = $value)
}

function meta::pure::dsl::dataframe::as(expr: Expression[1], alias: String[1]): Column[1]
{
   ^Column(name = $alias, expression = $expr, alias = $alias)
}

// Helper functions for creating data sources

// Helper functions for creating data sources
function meta::pure::dsl::dataframe::table(name: String[1]): TableReference[1]
{
   ^TableReference(tableName = $name)
}

function meta::pure::dsl::dataframe::table(schema: String[1], name: String[1]): TableReference[1]
{
   ^TableReference(tableName = $name, schema = $schema)
}

function meta::pure::dsl::dataframe::tableAs(name: String[1], alias: String[1]): TableReference[1]
{
   ^TableReference(tableName = $name, alias = $alias)
}

function meta::pure::dsl::dataframe::tableAs(schema: String[1], name: String[1], alias: String[1]): TableReference[1]
{
   ^TableReference(tableName = $name, schema = $schema, alias = $alias)
}

// Define a table with schema
function meta::pure::dsl::dataframe::tableWithSchema<T>(name: String[1], schema: TableSchema<T>[1]): TableReference[1]
{
   ^TableReference(tableName = $name, tableSchema = $schema);
}

// Define a table with schema and alias
function meta::pure::dsl::dataframe::tableWithSchemaAs<T>(name: String[1], schema: TableSchema<T>[1], alias: String[1]): TableReference[1]
{
   ^TableReference(tableName = $name, tableSchema = $schema, alias = $alias);
}

// Type-safe join functions
function meta::pure::dsl::dataframe::join<T, V>(left: DataFrame[1], right: DataFrame[1], joinType: JoinType[1], condition: Function<{T[1], V[1]->Boolean[1]}>[1]): DataFrame[1]
{
   ^DataFrame(
      source = ^JoinOperation(
         left = $left.source, 
         right = $right.source, 
         joinType = $joinType, 
         condition = $condition
      ),
      columns = $left.columns->concatenate($right.columns)
   );
}

// Type-safe join with table schemas
function meta::pure::dsl::dataframe::join<T, V>(left: DataFrame[1], leftSchema: TableSchema<T>[1], right: DataFrame[1], rightSchema: TableSchema<V>[1], joinType: JoinType[1], condition: Function<{T[1], V[1]->Boolean[1]}>[1]): DataFrame[1]
{
   ^DataFrame(
      source = ^JoinOperation(
         left = $left.source, 
         right = $right.source, 
         joinType = $joinType, 
         condition = $condition
      ),
      columns = $left.columns->concatenate($right.columns)
   );
}

function meta::pure::dsl::dataframe::join(left: DataSource[1], right: DataSource[1], condition: FilterCondition[1]): JoinOperation[1]
{
   ^JoinOperation(left = $left, right = $right, joinType = JoinType.INNER, condition = $condition)
}

function meta::pure::dsl::dataframe::join<T, V>(left: DataSource[1], right: DataSource[1], condition: Function<{T[1], V[1]->Boolean[1]}>[1]): JoinOperation[1]
{
   ^JoinOperation(left = $left, right = $right, joinType = JoinType.INNER, condition = $condition)
}

function meta::pure::dsl::dataframe::leftJoin(left: DataSource[1], right: DataSource[1], condition: FilterCondition[1]): JoinOperation[1]
{
   ^JoinOperation(left = $left, right = $right, joinType = JoinType.LEFT_OUTER, condition = $condition)
}

function meta::pure::dsl::dataframe::leftJoin<T, V>(left: DataSource[1], right: DataSource[1], condition: Function<{T[1], V[1]->Boolean[1]}>[1]): JoinOperation[1]
{
   ^JoinOperation(left = $left, right = $right, joinType = JoinType.LEFT_OUTER, condition = $condition)
}

function meta::pure::dsl::dataframe::rightJoin(left: DataSource[1], right: DataSource[1], condition: FilterCondition[1]): JoinOperation[1]
{
   ^JoinOperation(left = $left, right = $right, joinType = JoinType.RIGHT_OUTER, condition = $condition)
}

function meta::pure::dsl::dataframe::rightJoin<T, V>(left: DataSource[1], right: DataSource[1], condition: Function<{T[1], V[1]->Boolean[1]}>[1]): JoinOperation[1]
{
   ^JoinOperation(left = $left, right = $right, joinType = JoinType.RIGHT_OUTER, condition = $condition)
}

function meta::pure::dsl::dataframe::fullJoin(left: DataSource[1], right: DataSource[1], condition: FilterCondition[1]): JoinOperation[1]
{
   ^JoinOperation(left = $left, right = $right, joinType = JoinType.FULL_OUTER, condition = $condition)
}

function meta::pure::dsl::dataframe::fullJoin<T, V>(left: DataSource[1], right: DataSource[1], condition: Function<{T[1], V[1]->Boolean[1]}>[1]): JoinOperation[1]
{
   ^JoinOperation(left = $left, right = $right, joinType = JoinType.FULL_OUTER, condition = $condition)
}

function meta::pure::dsl::dataframe::crossJoin(left: DataSource[1], right: DataSource[1]): JoinOperation[1]
{
   ^JoinOperation(left = $left, right = $right, joinType = JoinType.CROSS, condition = ^BinaryOperation(left = ^LiteralExpression(value = true), operator = BinaryOperator.EQUALS, right = ^LiteralExpression(value = true)))
}

// Helper functions for creating aggregate functions
function meta::pure::dsl::dataframe::count(expr: Expression[1]): CountFunction[1]
{
   ^CountFunction(functionName = 'count', parameters = [$expr], distinct = false)
}

function meta::pure::dsl::dataframe::count<T>(col: ColSpec<T>[1]): CountFunction[1]
{
   ^CountFunction(functionName = 'count', parameters = [$col], distinct = false)
}

function meta::pure::dsl::dataframe::countDistinct(expr: Expression[1]): CountFunction[1]
{
   ^CountFunction(functionName = 'count', parameters = [$expr], distinct = true)
}

function meta::pure::dsl::dataframe::countDistinct<T>(col: ColSpec<T>[1]): CountFunction[1]
{
   ^CountFunction(functionName = 'count', parameters = [$col], distinct = true)
}

// Type-safe aggregate functions
function meta::pure::dsl::dataframe::sum<T>(col: ColSpec<T>[1]): AggColSpec<{T[1]->Any[0..1]},{Any[*]->Number[0..1]},Any>[1]
{
   ^AggColSpec<{T[1]->Any[0..1]},{Any[*]->Number[0..1]},Any>(
      name = 'sum_' + $col.name,
      keyFunc = {x:T[1] | $x->get($col.name)},
      valueFunc = {values:Any[*] | $values->sum()}
   );
}

function meta::pure::dsl::dataframe::avg<T>(col: ColSpec<T>[1]): AggColSpec<{T[1]->Any[0..1]},{Any[*]->Number[0..1]},Any>[1]
{
   ^AggColSpec<{T[1]->Any[0..1]},{Any[*]->Number[0..1]},Any>(
      name = 'avg_' + $col.name,
      keyFunc = {x:T[1] | $x->get($col.name)},
      valueFunc = {values:Any[*] | $values->average()}
   );
}

function meta::pure::dsl::dataframe::min<T>(col: ColSpec<T>[1]): AggColSpec<{T[1]->Any[0..1]},{Any[*]->Any[0..1]},Any>[1]
{
   ^AggColSpec<{T[1]->Any[0..1]},{Any[*]->Any[0..1]},Any>(
      name = 'min_' + $col.name,
      keyFunc = {x:T[1] | $x->get($col.name)},
      valueFunc = {values:Any[*] | $values->min()}
   );
}

function meta::pure::dsl::dataframe::max<T>(col: ColSpec<T>[1]): AggColSpec<{T[1]->Any[0..1]},{Any[*]->Any[0..1]},Any>[1]
{
   ^AggColSpec<{T[1]->Any[0..1]},{Any[*]->Any[0..1]},Any>(
      name = 'max_' + $col.name,
      keyFunc = {x:T[1] | $x->get($col.name)},
      valueFunc = {values:Any[*] | $values->max()}
   );
}

function meta::pure::dsl::dataframe::count<T>(col: ColSpec<T>[1]): AggColSpec<{T[1]->Any[0..1]},{Any[*]->Integer[0..1]},Any>[1]
{
   ^AggColSpec<{T[1]->Any[0..1]},{Any[*]->Integer[0..1]},Any>(
      name = 'count_' + $col.name,
      keyFunc = {x:T[1] | $x->get($col.name)},
      valueFunc = {values:Any[*] | $values->size()}
   );
}

// Legacy functions for backward compatibility
function meta::pure::dsl::dataframe::sum(expr: Expression[1]): SumFunction[1]
{
   ^SumFunction(functionName = 'sum', parameters = [$expr])
}

function meta::pure::dsl::dataframe::sum<T>(col: ColSpec<T>[1]): SumFunction[1]
{
   ^SumFunction(functionName = 'sum', parameters = [$col])
}

function meta::pure::dsl::dataframe::avg(expr: Expression[1]): AvgFunction[1]
{
   ^AvgFunction(functionName = 'avg', parameters = [$expr])
}

function meta::pure::dsl::dataframe::avg<T>(col: ColSpec<T>[1]): AvgFunction[1]
{
   ^AvgFunction(functionName = 'avg', parameters = [$col])
}

function meta::pure::dsl::dataframe::min(expr: Expression[1]): MinFunction[1]
{
   ^MinFunction(functionName = 'min', parameters = [$expr])
}

function meta::pure::dsl::dataframe::min<T>(col: ColSpec<T>[1]): MinFunction[1]
{
   ^MinFunction(functionName = 'min', parameters = [$col])
}

function meta::pure::dsl::dataframe::max(expr: Expression[1]): MaxFunction[1]
{
   ^MaxFunction(functionName = 'max', parameters = [$expr])
}

function meta::pure::dsl::dataframe::max<T>(col: ColSpec<T>[1]): MaxFunction[1]
{
   ^MaxFunction(functionName = 'max', parameters = [$col])
}

// Helper functions for creating order by clauses
function meta::pure::dsl::dataframe::asc(expr: Expression[1]): OrderByClause[1]
{
   ^OrderByClause(expression = $expr, direction = SortDirection.ASC)
}

function meta::pure::dsl::dataframe::desc(expr: Expression[1]): OrderByClause[1]
{
   ^OrderByClause(expression = $expr, direction = SortDirection.DESC)
}

// Window function helper functions
// Original over function for backward compatibility
function meta::pure::dsl::dataframe::over(expr: Expression[1], window: Window[1]): WindowFunction[1]
{
   let functionName = $expr->getFunctionName();
   
   if($functionName == 'row_number')
   {
      ^RowNumberFunction(functionName = $functionName, parameters = [], window = $window);
   }
   else if($functionName == 'rank')
   {
      ^RankFunction(functionName = $functionName, parameters = [], window = $window);
   }
   else if($functionName == 'dense_rank')
   {
      ^DenseRankFunction(functionName = $functionName, parameters = [], window = $window);
   }
   else if($functionName == 'lead' || $functionName == 'lag')
   {
      let params = $expr->getFunctionParameters();
      let valueExpr = $params->at(0);
      let offset = if($params->size() >= 2, |$params->at(1), |^LiteralExpression(value = 1));
      let defaultValue = if($params->size() >= 3, |$params->at(2), |^LiteralExpression(value = null));
      
      ^LeadLagFunction(functionName = $functionName, parameters = [$valueExpr], window = $window, offset = $offset, defaultValue = $defaultValue);
   }
   else if($functionName == 'first_value' || $functionName == 'last_value')
   {
      let params = $expr->getFunctionParameters();
      let valueExpr = $params->at(0);
      
      ^FirstLastValueFunction(functionName = $functionName, parameters = [$valueExpr], window = $window);
   }
   else
   {
      // Default to aggregate window function for sum, avg, min, max, count, etc.
      let params = if($expr->instanceOf(FunctionExpression), 
                     |$expr->cast(@FunctionExpression).parameters, 
                     |[$expr]);
      
      ^AggregateWindowFunction(functionName = $functionName, parameters = $params, window = $window);
   }
}

// Window function creation helper
function meta::pure::dsl::dataframe::over(expr: Expression[1], window: Window[1]): WindowFunction[1]
{
   ^WindowFunction(
      function = $expr,
      window = $window
   );
}

// OrderBy helper functions
function meta::pure::dsl::dataframe::asc<T>(col: ColSpec<T>[1]): OrderByClause[1]
{
   ^OrderByClause(expression = ^ColumnReference(colSpec = $col), direction = SortDirection.ASC);
}

function meta::pure::dsl::dataframe::desc<T>(col: ColSpec<T>[1]): OrderByClause[1]
{
   ^OrderByClause(expression = ^ColumnReference(colSpec = $col), direction = SortDirection.DESC);
}

function meta::pure::dsl::dataframe::getFunctionName(expr: Expression[1]): String[1]
{
   if($expr->instanceOf(FunctionExpression),
      |$expr->cast(@FunctionExpression).functionName,
      |'');
}

function meta::pure::dsl::dataframe::getFunctionParameters(expr: Expression[1]): Expression[*]
{
   if($expr->instanceOf(FunctionExpression),
      |$expr->cast(@FunctionExpression).parameters,
      |[]);
}

// Type-safe over functions for window operations

function 
   <<functionType.NormalizeRequiredFunction,
   PCT.function>>
   meta::pure::dsl::dataframe::over<T>(cols: ColSpec<(?:?)⊆T>[1]): Window[1]
{
   ^Window(
      partitionBy = [~$cols.name]
   );
}

function 
   <<functionType.NormalizeRequiredFunction,
   PCT.function>>
   meta::pure::dsl::dataframe::over<T>(cols: ColSpecArray<(?:?)⊆T>[1]): Window[1]
{
   ^Window(
      partitionBy = $cols.names->map(c | ~$c)
   );
}

function 
   <<functionType.NormalizeRequiredFunction,
   PCT.function>>
   meta::pure::dsl::dataframe::over<T>(orderBy: OrderByClause[*]): Window[1]
{
   ^Window(
      orderBy = $orderBy
   );
}

function 
   <<functionType.NormalizeRequiredFunction,
   PCT.function>>
   meta::pure::dsl::dataframe::over<T>(frame: Frame[1]): Window[1]
{
   ^Window(
      frame = $frame
   );
}

function 
   <<functionType.NormalizeRequiredFunction,
   PCT.function>>
   meta::pure::dsl::dataframe::over<T>(cols: ColSpec<(?:?)⊆T>[1], orderBy: OrderByClause[*]): Window[1]
{
   ^Window(
      partitionBy = [~$cols.name],
      orderBy = $orderBy
   );
}

function 
   <<functionType.NormalizeRequiredFunction,
   PCT.function>>
   meta::pure::dsl::dataframe::over<T>(cols: ColSpecArray<(?:?)⊆T>[1], orderBy: OrderByClause[*]): Window[1]
{
   ^Window(
      partitionBy = $cols.names->map(c | ~$c),
      orderBy = $orderBy
   );
}

function 
   <<functionType.NormalizeRequiredFunction,
   PCT.function>>
   meta::pure::dsl::dataframe::over<T>(cols: ColSpec<(?:?)⊆T>[1], frame: Frame[1]): Window[1]
{
   ^Window(
      partitionBy = [~$cols.name],
      frame = $frame
   );
}

function meta::pure::dsl::dataframe::partitionBy(columns: Expression[*]): Window[1]
{
   ^Window(partitionBy = $columns, orderBy = []);
}

function meta::pure::dsl::dataframe::partitionBy<T>(columns: ColSpec<T>[*]): Window[1]
{
   ^Window(partitionBy = $columns->map(c | ^ColumnReference(colSpec = $c)), orderBy = []);
}

function meta::pure::dsl::dataframe::orderBy(window: Window[1], clauses: OrderByClause[*]): Window[1]
{
   ^$window(orderBy = $clauses);
}

function meta::pure::dsl::dataframe::rowsUnboundedPreceding(window: Window[1]): Window[1]
{
   ^$window(
      frameType = WindowFrameType.ROWS, 
      frameStart = ^WindowFrameBound(type = WindowFrameBoundType.UNBOUNDED_PRECEDING),
      frameEnd = ^WindowFrameBound(type = WindowFrameBoundType.CURRENT_ROW)
   );
}

// Type-safe qualify function for window functions
function meta::pure::dsl::dataframe::qualify<T>(df: DataFrame<T>[1], condition: Expression[1]): DataFrame<T>[1]
{
   ^$df(qualify = $condition);
}

function meta::pure::dsl::dataframe::rowsBetween(window: Window[1], start: WindowFrameBound[1], end: WindowFrameBound[1]): Window[1]
{
   let frame = ^Rows(
      offsetFrom = toFrameValue($start),
      offsetTo = toFrameValue($end)
   );
   ^$window(frame = $frame);
}

function meta::pure::dsl::dataframe::rangeBetween(window: Window[1], start: WindowFrameBound[1], end: WindowFrameBound[1]): Window[1]
{
   let frame = ^Range(
      offsetFrom = toFrameValue($start),
      offsetTo = toFrameValue($end)
   );
   ^$window(frame = $frame);
}

function meta::pure::dsl::dataframe::unboundedPreceding(): WindowFrameBound[1]
{
   ^WindowFrameBound(type = WindowFrameBoundType.UNBOUNDED_PRECEDING);
}

function meta::pure::dsl::dataframe::unboundedFollowing(): WindowFrameBound[1]
{
   ^WindowFrameBound(type = WindowFrameBoundType.UNBOUNDED_FOLLOWING);
}

function meta::pure::dsl::dataframe::currentRow(): WindowFrameBound[1]
{
   ^WindowFrameBound(type = WindowFrameBoundType.CURRENT_ROW);
}

function meta::pure::dsl::dataframe::preceding(offset: Integer[1]): WindowFrameBound[1]
{
   ^WindowFrameBound(type = WindowFrameBoundType.PRECEDING, offset = $offset);
}

function meta::pure::dsl::dataframe::following(offset: Integer[1]): WindowFrameBound[1]
{
   ^WindowFrameBound(type = WindowFrameBoundType.FOLLOWING, offset = $offset);
}

// Helper function to convert WindowFrameBound to FrameValue
function meta::pure::dsl::dataframe::toFrameValue(bound: WindowFrameBound[1]): FrameValue[1]
{
   $bound.type->match([
      WindowFrameBoundType.UNBOUNDED_PRECEDING | ^UnboundedFrameValue(),
      WindowFrameBoundType.UNBOUNDED_FOLLOWING | ^UnboundedFrameValue(),
      WindowFrameBoundType.CURRENT_ROW | ^FrameIntValue(value = 0),
      WindowFrameBoundType.PRECEDING | ^FrameIntValue(value = -1 * $bound.offset->toOne()),
      WindowFrameBoundType.FOLLOWING | ^FrameIntValue(value = $bound.offset->toOne())
   ]);
}


// Window function factory functions
function meta::pure::dsl::dataframe::rowNumber(): FunctionExpression[1]
{
   ^FunctionExpression(functionName = 'row_number', parameters = []);
}

function meta::pure::dsl::dataframe::rank(): FunctionExpression[1]
{
   ^FunctionExpression(functionName = 'rank', parameters = []);
}

function meta::pure::dsl::dataframe::denseRank(): FunctionExpression[1]
{
   ^FunctionExpression(functionName = 'dense_rank', parameters = []);
}

function meta::pure::dsl::dataframe::lead(expr: Expression[1]): FunctionExpression[1]
{
   ^FunctionExpression(functionName = 'lead', parameters = [$expr]);
}

function meta::pure::dsl::dataframe::lead(expr: Expression[1], offset: Integer[1]): FunctionExpression[1]
{
   ^FunctionExpression(functionName = 'lead', parameters = [$expr, literal($offset)]);
}

function meta::pure::dsl::dataframe::lead(expr: Expression[1], offset: Integer[1], defaultValue: Expression[1]): FunctionExpression[1]
{
   ^FunctionExpression(functionName = 'lead', parameters = [$expr, literal($offset), $defaultValue]);
}

function meta::pure::dsl::dataframe::lag(expr: Expression[1]): FunctionExpression[1]
{
   ^FunctionExpression(functionName = 'lag', parameters = [$expr]);
}

function meta::pure::dsl::dataframe::lag(expr: Expression[1], offset: Integer[1]): FunctionExpression[1]
{
   ^FunctionExpression(functionName = 'lag', parameters = [$expr, literal($offset)]);
}

function meta::pure::dsl::dataframe::lag(expr: Expression[1], offset: Integer[1], defaultValue: Expression[1]): FunctionExpression[1]
{
   ^FunctionExpression(functionName = 'lag', parameters = [$expr, literal($offset), $defaultValue]);
}

function meta::pure::dsl::dataframe::firstValue(expr: Expression[1]): FunctionExpression[1]
{
   ^FunctionExpression(functionName = 'first_value', parameters = [$expr]);
}

function meta::pure::dsl::dataframe::lastValue(expr: Expression[1]): FunctionExpression[1]
{
   ^FunctionExpression(functionName = 'last_value', parameters = [$expr]);
}

// Aggregate function factory functions
function meta::pure::dsl::dataframe::sum(expr: Expression[1]): FunctionExpression[1]
{
   ^FunctionExpression(functionName = 'sum', parameters = [$expr]);
}

function meta::pure::dsl::dataframe::sum<T>(col: ColSpec<T>[1]): FunctionExpression[1]
{
   ^FunctionExpression(functionName = 'sum', parameters = [$col]);
}

function meta::pure::dsl::dataframe::avg(expr: Expression[1]): FunctionExpression[1]
{
   ^FunctionExpression(functionName = 'avg', parameters = [$expr]);
}

function meta::pure::dsl::dataframe::avg<T>(col: ColSpec<T>[1]): FunctionExpression[1]
{
   ^FunctionExpression(functionName = 'avg', parameters = [$col]);
}

function meta::pure::dsl::dataframe::min(expr: Expression[1]): FunctionExpression[1]
{
   ^FunctionExpression(functionName = 'min', parameters = [$expr]);
}

function meta::pure::dsl::dataframe::min<T>(col: ColSpec<T>[1]): FunctionExpression[1]
{
   ^FunctionExpression(functionName = 'min', parameters = [$col]);
}

function meta::pure::dsl::dataframe::max(expr: Expression[1]): FunctionExpression[1]
{
   ^FunctionExpression(functionName = 'max', parameters = [$expr]);
}

function meta::pure::dsl::dataframe::max<T>(col: ColSpec<T>[1]): FunctionExpression[1]
{
   ^FunctionExpression(functionName = 'max', parameters = [$col]);
}

function meta::pure::dsl::dataframe::count(expr: Expression[1]): FunctionExpression[1]
{
   ^FunctionExpression(functionName = 'count', parameters = [$expr]);
}

function meta::pure::dsl::dataframe::count<T>(col: ColSpec<T>[1]): FunctionExpression[1]
{
   ^FunctionExpression(functionName = 'count', parameters = [$col]);
}

// WITH clause helper functions
function meta::pure::dsl::dataframe::with(df: DataFrame[1], cte: CommonTableExpression[1]): DataFrame[1]
{
   ^$df(ctes = $df.ctes->add($cte));
}

function meta::pure::dsl::dataframe::with(df: DataFrame[1], ctes: CommonTableExpression[*]): DataFrame[1]
{
   ^$df(ctes = $df.ctes->concatenate($ctes));
}

function meta::pure::dsl::dataframe::cte(name: String[1], query: DataFrame[1]): CommonTableExpression[1]
{
   ^CommonTableExpression(name = $name, query = $query, isRecursive = false);
}

function meta::pure::dsl::dataframe::cte(name: String[1], columns: String[*], query: DataFrame[1]): CommonTableExpression[1]
{
   ^CommonTableExpression(name = $name, columns = $columns, query = $query, isRecursive = false);
}

function meta::pure::dsl::dataframe::recursiveCte(name: String[1], columns: String[*], query: DataFrame[1]): CommonTableExpression[1]
{
   ^CommonTableExpression(name = $name, columns = $columns, query = $query, isRecursive = true);
}

// Inline TDS definition
native function meta::pure::dsl::dataframe::TDS<T>(csv: String[1]): DataFrame<T>[1];

// Syntax for inline TDS definition with columns and data
function meta::pure::dsl::dataframe::createInlineTDS(csvData: String[1]): DataFrame[1]
{
   // Parse the CSV data and create a DataFrame
   ^DataFrame(source = ^TableReference(tableName = 'inline_tds'))
}

// Convert TDS to DataFrame
function meta::pure::dsl::dataframe::fromTDS<T>(tds: TDS<T>[1]): DataFrame[1]
{
   // Extract column names from TDS
   let columnNames = $tds->getColumnNames();
   
   // Create columns from TDS
   let columns = $columnNames->map(name | 
      ^Column(name = $name, expression = ^ColumnReference(colSpec = ^ColSpec<T>(name = $name)), alias = $name)
   );
   
   // Create DataFrame from TDS
   ^DataFrame(
      columns = $columns,
      source = ^TableReference(tableName = 'inline_tds')
   )
}

// Parse #TDS syntax
function meta::pure::dsl::dataframe::parseTDSLiteral(tdsText: String[1]): DataFrame[1]
{
   // Extract column names and data from TDS literal
   let lines = $tdsText->split('\n');
   
   // First line contains column names
   let columnNames = $lines->at(0)->trim()->split('\s+');
   
   // Create columns
   let columns = $columnNames->map(name | 
      ^Column(name = $name, expression = ^ColumnReference(colSpec = ^ColSpec<T>(name = $name)), alias = $name)
   );
   
   // Create DataFrame
   ^DataFrame(
      columns = $columns,
      source = ^TableReference(tableName = 'inline_tds')
   )
}

// Convert DataFrame to SQL for the specified database
function meta::pure::dsl::dataframe::toSQL(df: DataFrame[1], database: Database[1]): String[1]
{
   $database->match([
      db: Database[1] | if($db == Database.SNOWFLAKE, 
                           meta::pure::dsl::snowflake::generateSnowflakeSQL($df),
                           if($db == Database.DUCKDB,
                              meta::pure::dsl::duckdb::generateDuckDBSQL($df),
                              if($db == Database.BIGQUERY,
                                 meta::pure::dsl::bigquery::generateBigQuerySQL($df),
                                 if($db == Database.DATABRICKS,
                                    meta::pure::dsl::databricks::generateDatabricksSQL($df),
                                    if($db == Database.REDSHIFT,
                                       meta::pure::dsl::redshift::generateRedshiftSQL($df),
                                       fail('Unsupported database: ' + $db->toString()); '')))))
   ]);
}

// Type-safe SQL generation for specific databases
function meta::pure::dsl::dataframe::toRedshiftSQL<T>(df: DataFrame<T>[1]): String[1]
{
   toSQL($df, Database.REDSHIFT);
}

function meta::pure::dsl::dataframe::toDatabricksSQL<T>(df: DataFrame<T>[1]): String[1]
{
   toSQL($df, Database.DATABRICKS);
}

function meta::pure::dsl::dataframe::toBigQuerySQL<T>(df: DataFrame<T>[1]): String[1]
{
   toSQL($df, Database.BIGQUERY);
}
