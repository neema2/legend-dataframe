// Copyright 2025 Neema Raphael
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::dsl::dataframe::*;
import meta::pure::dsl::dataframe::metamodel::*;
import meta::pure::dsl::dataframe::metamodel::scalar::*;
import meta::pure::dsl::dataframe::scalar::*;

/**
 * Implementation of conditional scalar functions for DataFrame DSL
 */

// Initialize conditional functions in the scalar function registry
function meta::pure::dsl::dataframe::scalar::initializeConditionalFunctions(registry: Map<String, ScalarFunctionImplementation>[1]): Map<String, ScalarFunctionImplementation>[1]
{
   // COALESCE function
   $registry->put('coalesce', ^ScalarFunctionImplementation(
      standardName = 'COALESCE',
      databases = newMap([
         pair(Database.SNOWFLAKE, 'COALESCE'),
         pair(Database.DUCKDB, 'COALESCE'),
         pair(Database.BIGQUERY, 'COALESCE'),
         pair(Database.DATABRICKS, 'COALESCE'),
         pair(Database.REDSHIFT, 'COALESCE'),
         pair(Database.POSTGRES, 'COALESCE')
      ])
   ));
   
   // NULLIF function
   $registry->put('nullif', ^ScalarFunctionImplementation(
      standardName = 'NULLIF',
      databases = newMap([
         pair(Database.SNOWFLAKE, 'NULLIF'),
         pair(Database.DUCKDB, 'NULLIF'),
         pair(Database.BIGQUERY, 'NULLIF'),
         pair(Database.DATABRICKS, 'NULLIF'),
         pair(Database.REDSHIFT, 'NULLIF'),
         pair(Database.POSTGRES, 'NULLIF')
      ])
   ));
   
   // GREATEST function
   $registry->put('greatest', ^ScalarFunctionImplementation(
      standardName = 'GREATEST',
      databases = newMap([
         pair(Database.SNOWFLAKE, 'GREATEST'),
         pair(Database.DUCKDB, 'GREATEST'),
         pair(Database.BIGQUERY, 'GREATEST'),
         pair(Database.DATABRICKS, 'GREATEST'),
         pair(Database.REDSHIFT, 'GREATEST'),
         pair(Database.POSTGRES, 'GREATEST')
      ])
   ));
   
   // LEAST function
   $registry->put('least', ^ScalarFunctionImplementation(
      standardName = 'LEAST',
      databases = newMap([
         pair(Database.SNOWFLAKE, 'LEAST'),
         pair(Database.DUCKDB, 'LEAST'),
         pair(Database.BIGQUERY, 'LEAST'),
         pair(Database.DATABRICKS, 'LEAST'),
         pair(Database.REDSHIFT, 'LEAST'),
         pair(Database.POSTGRES, 'LEAST')
      ])
   ));
   
   $registry;
}

// Factory functions for creating conditional scalar functions
function meta::pure::dsl::dataframe::coalesce(expr1: Expression[1], expr2: Expression[1], additional: Expression[*]): ScalarFunction[1]
{
   ^CommonScalarFunction(
      functionName = 'coalesce',
      parameters = $expr1->concatenate($expr2)->concatenate($additional)->toOneMany(),
      implementation = scalarFunctionRegistry()->get('coalesce')->toOne()
   );
}

function meta::pure::dsl::dataframe::nullif(expr: Expression[1], compareExpr: Expression[1]): ScalarFunction[1]
{
   ^CommonScalarFunction(
      functionName = 'nullif',
      parameters = [$expr, $compareExpr],
      implementation = scalarFunctionRegistry()->get('nullif')->toOne()
   );
}

function meta::pure::dsl::dataframe::greatest(expr1: Expression[1], expr2: Expression[1], additional: Expression[*]): ScalarFunction[1]
{
   ^CommonScalarFunction(
      functionName = 'greatest',
      parameters = $expr1->concatenate($expr2)->concatenate($additional)->toOneMany(),
      implementation = scalarFunctionRegistry()->get('greatest')->toOne()
   );
}

function meta::pure::dsl::dataframe::least(expr1: Expression[1], expr2: Expression[1], additional: Expression[*]): ScalarFunction[1]
{
   ^CommonScalarFunction(
      functionName = 'least',
      parameters = $expr1->concatenate($expr2)->concatenate($additional)->toOneMany(),
      implementation = scalarFunctionRegistry()->get('least')->toOne()
   );
}
