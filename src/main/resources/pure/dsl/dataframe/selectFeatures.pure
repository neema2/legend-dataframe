// Copyright 2025 Neema Raphael
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::dsl::dataframe::*;
import meta::pure::dsl::dataframe::metamodel::*;

// Helper functions for BigQuery-specific features

// Set SELECT AS STRUCT
function meta::pure::dsl::dataframe::asStruct(df: DataFrame[1]): DataFrame[1]
{
   ^$df(structOutput = true, valueOutput = false);
}

// Set SELECT AS VALUE
function meta::pure::dsl::dataframe::asValue(df: DataFrame[1]): DataFrame[1]
{
   ^$df(valueOutput = true, structOutput = false);
}

// Add SELECT * EXCEPT
function meta::pure::dsl::dataframe::except(df: DataFrame[1], columns: String[*]): DataFrame[1]
{
   ^$df(exceptColumns = $columns);
}

// Add SELECT * EXCEPT with column specifications
function meta::pure::dsl::dataframe::except<T>(df: DataFrame[1], cols: ColSpecArray<T>[1]): DataFrame[1]
{
   ^$df(exceptColumns = $cols.names);
}

// Add SELECT * EXCEPT with single column
function meta::pure::dsl::dataframe::except<T>(df: DataFrame[1], col: ColSpec<T>[1]): DataFrame[1]
{
   ^$df(exceptColumns = [$col.name]);
}

// Add SELECT * REPLACE
function meta::pure::dsl::dataframe::replace(df: DataFrame[1], replacements: Map<String, Expression>[1]): DataFrame[1]
{
   ^$df(replaceColumns = $replacements);
}

// Add WITH DIFFERENTIAL_PRIVACY
function meta::pure::dsl::dataframe::withDifferentialPrivacy(df: DataFrame[1], epsilon: Float[1], delta: Float[0..1], kappa: Float[0..1]): DataFrame[1]
{
   ^$df(differentialPrivacy = ^DifferentialPrivacyClause(epsilon = $epsilon, delta = $delta, kappa = $kappa));
}

// Add WITH DIFFERENTIAL_PRIVACY with sensitivity
function meta::pure::dsl::dataframe::withDifferentialPrivacy(df: DataFrame[1], epsilon: Float[1], sensitivityType: SensitivityType[1], sensitivityValue: Float[1]): DataFrame[1]
{
   ^$df(differentialPrivacy = ^DifferentialPrivacyClause(
      epsilon = $epsilon, 
      sensitivityType = $sensitivityType,
      sensitivityValue = $sensitivityValue
   ));
}

// Add WITH AGGREGATION_THRESHOLD
function meta::pure::dsl::dataframe::withAggregationThreshold(df: DataFrame[1], threshold: Integer[1]): DataFrame[1]
{
   ^$df(aggregationThreshold = ^AggregationThresholdClause(threshold = $threshold));
}

// Add WITH AGGREGATION_THRESHOLD with replacement value
function meta::pure::dsl::dataframe::withAggregationThreshold(df: DataFrame[1], threshold: Integer[1], replaceWith: Any[1]): DataFrame[1]
{
   ^$df(aggregationThreshold = ^AggregationThresholdClause(threshold = $threshold, replaceWith = $replaceWith));
}
