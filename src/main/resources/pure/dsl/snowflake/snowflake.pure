// Copyright 2025 Neema Raphael
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::pure::dsl::dataframe::*;
import meta::pure::dsl::dataframe::metamodel::*;
import meta::pure::dsl::dataframe::metamodel::column::*;
import meta::pure::dsl::snowflake::*;

/**
 * Snowflake SQL generator for the DataFrame DSL
 * This module provides functions to convert DataFrame objects to Snowflake SQL syntax
 */

// Main function to generate Snowflake SQL from a DataFrame
function meta::pure::dsl::snowflake::generateSnowflakeSQL(df: DataFrame[1]): String[1]
{
   // Snowflake supports all features - no checks needed
   
   let withClause = $df->generateWithClause();
   $withClause + 
   $df->generateSelectClause() + 
   $df->generateFromClause() + 
   $df->generateWhereClause() + 
   $df->generateSampleClause() +  // Add SAMPLE
   $df->generateGroupByClause() + 
   $df->generateHavingClause() + 
   $df->generateQualifyClause() +  // Add QUALIFY
   $df->generateOrderByClause() + 
   $df->generateLimitOffsetClause() +
   $df->generateAtClause() +       // Add AT
   $df->generateChangesClause() +  // Add CHANGES 
   $df->generateConnectByClause()  // Add CONNECT BY
}

// Generate the SELECT clause
function <<access.private>> meta::pure::dsl::snowflake::generateSelectClause(df: DataFrame[1]): String[1]
{
   'SELECT ' + if($df.distinct == true, 'DISTINCT ', '') + 
   if($df.columns->isEmpty(), 
      '*', 
      $df.columns->map(c | $c.expression->generateSnowflakeExpression() + if($c.alias->isNotEmpty(), ' AS ' + $c.alias->toOne(), ''))->joinStrings(', '))
}

// Generate the FROM clause
function <<access.private>> meta::pure::dsl::snowflake::generateFromClause(df: DataFrame[1]): String[1]
{
   if($df.source->isEmpty(), 
      '', 
      '\nFROM ' + $df.source->toOne()->generateSnowflakeDataSource() + 
      $df->generatePivotClause() + 
      $df->generateUnpivotClause() + 
      $df->generateMatchRecognizeClause())
}

// Generate the WHERE clause
function <<access.private>> meta::pure::dsl::snowflake::generateWhereClause(df: DataFrame[1]): String[1]
{
   if($df.filter->isEmpty(), 
      '', 
      '\nWHERE ' + $df.filter->toOne()->generateSnowflakeExpression())
}

// Generate the GROUP BY clause
function <<access.private>> meta::pure::dsl::snowflake::generateGroupByClause(df: DataFrame[1]): String[1]
{
   if($df.groupBy->isEmpty() || $df.groupBy.columns->isEmpty(), 
      '', 
      '\nGROUP BY ' + $df.groupBy.columns->map(c | $c->generateSnowflakeExpression())->joinStrings(', '))
}

// Generate the HAVING clause
function <<access.private>> meta::pure::dsl::snowflake::generateHavingClause(df: DataFrame[1]): String[1]
{
   if($df.having->isEmpty(), 
      '', 
      '\nHAVING ' + $df.having->toOne()->generateSnowflakeExpression())
}

// Generate the ORDER BY clause
function <<access.private>> meta::pure::dsl::snowflake::generateOrderByClause(df: DataFrame[1]): String[1]
{
   if($df.orderBy->isEmpty(), 
      '', 
      '\nORDER BY ' + $df.orderBy->map(o | $o.expression->generateSnowflakeExpression() + ' ' + $o.direction->toString())->joinStrings(', '))
}

// Generate the LIMIT and OFFSET clauses
function <<access.private>> meta::pure::dsl::snowflake::generateLimitOffsetClause(df: DataFrame[1]): String[1]
{
   let limitClause = if($df.limit->isEmpty(), '', '\nLIMIT ' + $df.limit->toOne()->toString());
   let offsetClause = if($df.offset->isEmpty(), '', '\nOFFSET ' + $df.offset->toOne()->toString());
   $limitClause + $offsetClause;
}

// Generate SAMPLE clause
function <<access.private>> meta::pure::dsl::snowflake::generateSampleClause(df: DataFrame[1]): String[1]
{
   if($df.sample->isEmpty(), 
      '', 
      '\nSAMPLE (' + $df.sample->toOne() + ')')
}

// Generate QUALIFY clause
function <<access.private>> meta::pure::dsl::snowflake::generateQualifyClause(df: DataFrame[1]): String[1]
{
   if($df.qualify->isEmpty(), 
      '', 
      '\nQUALIFY ' + $df.qualify->toOne()->generateSnowflakeExpression())
}

// Generate AT clause
function <<access.private>> meta::pure::dsl::snowflake::generateAtClause(df: DataFrame[1]): String[1]
{
   if($df.at->isEmpty(), 
      '', 
      '\nAT(' + $df.at->toOne() + ')')
}

// Generate CHANGES clause
function <<access.private>> meta::pure::dsl::snowflake::generateChangesClause(df: DataFrame[1]): String[1]
{
   if($df.changes->isEmpty(), 
      '', 
      '\nCHANGES(' + $df.changes->toOne() + ')')
}

// Generate CONNECT BY clause
function <<access.private>> meta::pure::dsl::snowflake::generateConnectByClause(df: DataFrame[1]): String[1]
{
   if($df.connectBy->isEmpty(), 
      '', 
      '\nCONNECT BY ' + $df.connectBy->toOne()->generateSnowflakeExpression())
}

// Generate PIVOT clause
function <<access.private>> meta::pure::dsl::snowflake::generatePivotClause(df: DataFrame[1]): String[1]
{
   if($df.pivot->isEmpty(), 
      '', 
      ' PIVOT(' + 
         $df.pivot->toOne().aggregation->generateSnowflakeExpression() + 
         ' FOR ' + $df.pivot->toOne().forColumn->generateSnowflakeExpression() + 
         ' IN (' + $df.pivot->toOne().inValues->map(v | $v->generateSnowflakeExpression())->joinStrings(', ') + '))')
}

// Generate UNPIVOT clause
function <<access.private>> meta::pure::dsl::snowflake::generateUnpivotClause(df: DataFrame[1]): String[1]
{
   if($df.unpivot->isEmpty(), 
      '', 
      ' UNPIVOT(' + 
         $df.unpivot->toOne().valueColumn + 
         ' FOR ' + $df.unpivot->toOne().nameColumn + 
         ' IN (' + $df.unpivot->toOne().columns->map(c | $c->generateSnowflakeExpression())->joinStrings(', ') + '))')
}

// Generate MATCH_RECOGNIZE clause
function <<access.private>> meta::pure::dsl::snowflake::generateMatchRecognizeClause(df: DataFrame[1]): String[1]
{
   if($df.matchRecognize->isEmpty(), 
      '', 
      ' MATCH_RECOGNIZE(' + 
         'PARTITION BY ' + $df.matchRecognize->toOne().partitionBy->map(c | $c->generateSnowflakeExpression())->joinStrings(', ') + 
         ' ORDER BY ' + $df.matchRecognize->toOne().orderBy->map(o | $o.expression->generateSnowflakeExpression() + if($o.direction == SortDirection.DESC, ' DESC', ''))->joinStrings(', ') + 
         ' MEASURES ' + $df.matchRecognize->toOne().measures->map(m | $m.expression->generateSnowflakeExpression() + ' AS ' + $m.alias)->joinStrings(', ') + 
         ' PATTERN (' + $df.matchRecognize->toOne().pattern + ')' + 
         ' DEFINE ' + $df.matchRecognize->toOne().define->map(d | $d.first + ' AS ' + $d.second->generateSnowflakeExpression())->joinStrings(', ') + 
      ')')
}

// Generate the WITH clause
function <<access.private>> meta::pure::dsl::snowflake::generateWithClause(df: DataFrame[1]): String[1]
{
   if($df.ctes->isEmpty(), 
      '', 
      'WITH ' + $df.ctes->map(cte | 
         if($cte.isRecursive, 
            'RECURSIVE ', 
            '') + 
         $cte.name + if($cte.columns->isEmpty(), '', '(' + $cte.columns->joinStrings(', ') + ')') + ' AS (' + 
         if($cte.query->instanceOf(DataFrame), 
            meta::pure::dsl::snowflake::generateSnowflakeSQL($cte.query->cast(@DataFrame)), 
            $cte.query->cast(@String)) + 
         ')'
      )->joinStrings(',\n') + '\n')
}

// Generate SQL for a data source
function <<access.private>> meta::pure::dsl::snowflake::generateSnowflakeDataSource(source: DataSource[1]): String[1]
{
   $source->match([
      t: TableReference[1] | 
         if($t.tableName == 'inline_tds' && $t.inlineTDSData->isNotEmpty(),
            | '(SELECT ' + $t.inlineTDSData->toOne().columns->joinStrings(', ') + ' FROM VALUES ' + 
              $t.inlineTDSData->toOne().rows->map(row | 
                 '(' + $row->map(cell | generateSnowflakeLiteral($cell))->joinStrings(', ') + ')'
               )->joinStrings(', ') + ')' + 
               if($t.alias->isNotEmpty(), ' AS ' + $t.alias->toOne(), ''),
            | if($t.schema->isNotEmpty(), $t.schema->toOne() + '.', '') + $t.tableName + if($t.alias->isNotEmpty(), ' AS ' + $t.alias->toOne(), '')
         ),
      j: JoinOperation[1] | 
         let joinType = $j.joinType->generateSnowflakeJoinType();
         let joinCondition = if($j.usingColumns->isNotEmpty(),
                                'USING (' + $j.usingColumns->joinStrings(', ') + ')',
                                'ON ' + $j.condition->generateSnowflakeExpression());
         $j.left->generateSnowflakeDataSource() + ' ' + $joinType + ' ' + $j.right->generateSnowflakeDataSource() + ' ' + $joinCondition,
      l: LateralJoin[1] | $l.left->generateSnowflakeDataSource() + ' ' + $l.joinType->generateSnowflakeJoinType() + ' LATERAL ' + $l.right->generateSnowflakeDataSource() + ' ON ' + $l.condition->generateSnowflakeExpression(),
      s: SubquerySource[1] | '(' + $s.dataFrame->generateSnowflakeSQL() + ') AS ' + $s.alias,
      d: DataSource[1] | 'UNKNOWN_SOURCE_TYPE'
   ])
}

// Generate SQL for join types
function <<access.private>> meta::pure::dsl::snowflake::generateSnowflakeJoinType(joinType: JoinType[1]): String[1]
{
   $joinType->match([
      JoinType.INNER | 'INNER JOIN',
      JoinType.LEFT_OUTER | 'LEFT OUTER JOIN',
      JoinType.RIGHT_OUTER | 'RIGHT OUTER JOIN',
      JoinType.FULL_OUTER | 'FULL OUTER JOIN',
      JoinType.CROSS | 'CROSS JOIN'
   ])
}

// Generate SQL for expressions
function <<access.private>> meta::pure::dsl::snowflake::generateSnowflakeExpression(expr: Expression[1]): String[1]
{
   $expr->match([
      l: LiteralExpression[1] | $l.value->generateSnowflakeLiteral(),
      c: ColumnReference[1] | if($c.tableAlias->isNotEmpty(), $c.tableAlias->toOne() + '.', '') + $c.columnName,
      f: FunctionExpression[1] | $f->generateSnowflakeFunction(),
      b: BinaryOperation[1] | '(' + $b.left->generateSnowflakeExpression() + ' ' + $b.operator->generateSnowflakeBinaryOperator() + ' ' + $b.right->generateSnowflakeExpression() + ')',
      u: UnaryOperation[1] | $u.operator->generateSnowflakeUnaryOperator() + '(' + $u.expression->generateSnowflakeExpression() + ')',
      e: Expression[1] | 'UNKNOWN_EXPRESSION_TYPE'
   ])
}

// Generate SQL for function expressions
function <<access.private>> meta::pure::dsl::snowflake::generateSnowflakeFunction(func: FunctionExpression[1]): String[1]
{
   $func->match([
      c: CountFunction[1] | 'COUNT(' + if($c.distinct == true, 'DISTINCT ', '') + $c.parameters->map(p | $p->generateSnowflakeExpression())->joinStrings(', ') + ')',
      a: AggregateFunction[1] | $a.functionName->toUpperCase() + '(' + $a.parameters->map(p | $p->generateSnowflakeExpression())->joinStrings(', ') + ')',
      w: WindowFunction[1] | $w->generateSnowflakeWindowFunction(),
      f: FunctionExpression[1] | $f.functionName + '(' + $f.parameters->map(p | $p->generateSnowflakeExpression())->joinStrings(', ') + ')'
   ])
}

// Generate SQL for window functions
function <<access.private>> meta::pure::dsl::snowflake::generateSnowflakeWindowFunction(func: WindowFunction[1]): String[1]
{
   let functionCall = $func->match([
      r: RowNumberFunction[1] | 'ROW_NUMBER()',
      r: RankFunction[1] | 'RANK()',
      d: DenseRankFunction[1] | 'DENSE_RANK()',
      l: LeadLagFunction[1] | $l.functionName->toUpperCase() + '(' + 
                                $l.parameters->map(p | $p->generateSnowflakeExpression())->joinStrings(', ') +
                                if($l.offset->isNotEmpty(), ', ' + $l.offset->toOne()->generateSnowflakeExpression(), '') + 
                                if($l.defaultValue->isNotEmpty(), ', ' + $l.defaultValue->toOne()->generateSnowflakeExpression(), '') +
                                ')',
      f: FirstLastValueFunction[1] | $f.functionName->toUpperCase() + '(' + 
                                      $f.parameters->map(p | $p->generateSnowflakeExpression())->joinStrings(', ') + 
                                      ')' + if($f.ignoreNulls == true, ' IGNORE NULLS', ''),
      a: AggregateWindowFunction[1] | $a.functionName->toUpperCase() + '(' + 
                                      $a.parameters->map(p | $p->generateSnowflakeExpression())->joinStrings(', ') + 
                                      ')',
      w: WindowFunction[1] | $w.functionName + '(' + 
                              $w.parameters->map(p | $p->generateSnowflakeExpression())->joinStrings(', ') + 
                              ')'
   ]);
   
   $functionCall + ' OVER(' + $func.window->generateSnowflakeWindow() + ')';
}

// Generate SQL for window specification
function <<access.private>> meta::pure::dsl::snowflake::generateSnowflakeWindow(window: Window[1]): String[1]
{
   let partitionBy = if($window.partitionBy->isEmpty(), 
                       '', 
                       'PARTITION BY ' + $window.partitionBy->map(e | $e->generateSnowflakeExpression())->joinStrings(', '));
   
   let orderBy = if($window.orderBy->isEmpty(), 
                    '', 
                    if($partitionBy->isEmpty(), '', ' ') + 
                    'ORDER BY ' + $window.orderBy->map(o | $o.expression->generateSnowflakeExpression() + ' ' + $o.direction->toString())->joinStrings(', '));
   
   let frame = if($window.frameType->isEmpty(), 
                 '', 
                 if($partitionBy->isEmpty() && $orderBy->isEmpty(), '', ' ') + 
                 $window.frameType->toOne()->toString() + ' BETWEEN ' + 
                 $window.frameStart->toOne()->generateSnowflakeWindowFrameBound() + ' AND ' + 
                 $window.frameEnd->toOne()->generateSnowflakeWindowFrameBound());
   
   $partitionBy + $orderBy + $frame;
}

// Generate SQL for window frame bounds
function <<access.private>> meta::pure::dsl::snowflake::generateSnowflakeWindowFrameBound(bound: WindowFrameBound[1]): String[1]
{
   $bound.type->match([
      WindowFrameBoundType.UNBOUNDED_PRECEDING | 'UNBOUNDED PRECEDING',
      WindowFrameBoundType.PRECEDING | $bound.offset->toOne()->toString() + ' PRECEDING',
      WindowFrameBoundType.CURRENT_ROW | 'CURRENT ROW',
      WindowFrameBoundType.FOLLOWING | $bound.offset->toOne()->toString() + ' FOLLOWING',
      WindowFrameBoundType.UNBOUNDED_FOLLOWING | 'UNBOUNDED FOLLOWING'
   ])
}

// Generate SQL for binary operators
function <<access.private>> meta::pure::dsl::snowflake::generateSnowflakeBinaryOperator(op: BinaryOperator[1]): String[1]
{
   $op->match([
      BinaryOperator.EQUALS | '=',
      BinaryOperator.NOT_EQUALS | '!=',
      BinaryOperator.GREATER_THAN | '>',
      BinaryOperator.LESS_THAN | '<',
      BinaryOperator.GREATER_THAN_OR_EQUALS | '>=',
      BinaryOperator.LESS_THAN_OR_EQUALS | '<=',
      BinaryOperator.AND | 'AND',
      BinaryOperator.OR | 'OR',
      BinaryOperator.LIKE | 'LIKE',
      BinaryOperator.IN | 'IN',
      BinaryOperator.NOT_IN | 'NOT IN',
      BinaryOperator.IS_NULL | 'IS NULL',
      BinaryOperator.IS_NOT_NULL | 'IS NOT NULL'
   ])
}

// Generate SQL for unary operators
function <<access.private>> meta::pure::dsl::snowflake::generateSnowflakeUnaryOperator(op: UnaryOperator[1]): String[1]
{
   $op->match([
      UnaryOperator.NOT | 'NOT '
   ])
}

// Generate SQL for literal values
function <<access.private>> meta::pure::dsl::snowflake::generateSnowflakeLiteral(value: Any[1]): String[1]
{
   $value->match([
      s: String[1] | '\'' + $s->replace('\'', '\'\'') + '\'',
      i: Integer[1] | $i->toString(),
      f: Float[1] | $f->toString(),
      b: Boolean[1] | if($b, 'TRUE', 'FALSE'),
      d: Date[1] | 'DATE \'' + $d->toString() + '\'',
      n: Nil[1] | 'NULL',
      a: Any[1] | $a->toString()
   ])
}

// Generate SQL for type-safe column specifications
function <<access.private>> meta::pure::dsl::snowflake::generateSQLFromColSpec<T>(colSpec: ColSpec<T>[1]): String[1]
{
   // For snowflake, quoted identifiers use double quotes
   if($colSpec.name->contains(' '), 
      '"' + $colSpec.name + '"', 
      $colSpec.name
   );
}

function <<access.private>> meta::pure::dsl::snowflake::generateSQLFromColSpecArray<T>(colSpecs: ColSpecArray<T>[1]): String[1]
{
   // Handle column names with spaces by quoting them
   $colSpecs.names->map(n | if($n->contains(' '), '"' + $n + '"', $n))->joinStrings(', ');
}

function <<access.private>> meta::pure::dsl::snowflake::generateSQLFromFuncColSpec<F, Z>(funcColSpec: FuncColSpec<F, Z>[1]): String[1]
{
   $funcColSpec.name;
}

function <<access.private>> meta::pure::dsl::snowflake::generateSQLFromAggColSpec<K, V, R>(aggColSpec: AggColSpec<K, V, R>[1]): String[1]
{
   let funcName = if($aggColSpec.name->startsWith('sum_'), 'SUM',
                  if($aggColSpec.name->startsWith('avg_'), 'AVG',
                  if($aggColSpec.name->startsWith('min_'), 'MIN',
                  if($aggColSpec.name->startsWith('max_'), 'MAX',
                  if($aggColSpec.name->startsWith('count_'), 'COUNT', 'UNKNOWN')))));
   
   let colName = $aggColSpec.name->substring($aggColSpec.name->indexOf('_') + 1, $aggColSpec.name->length());
   
   $funcName + '(' + $colName + ')';
}

function <<access.private>> meta::pure::dsl::snowflake::generateSQLFromWindowSpec(windowSpec: WindowSpec[1]): String[1]
{
   let partitionBy = if($windowSpec.partitionBy->isEmpty(), 
                      '', 
                      'PARTITION BY ' + $windowSpec.partitionBy->joinStrings(', '));
   
   let orderBy = if($windowSpec.orderBy->isEmpty(), 
                   '', 
                   if($partitionBy->isEmpty(), '', ' ') + 
                   'ORDER BY ' + $windowSpec.orderBy->joinStrings(', '));
   
   $partitionBy + $orderBy;
}

// Add handling for _Window
function meta::pure::dsl::snowflake::generateWindowSpecSQL(windowSpec: _Window<Any>[1]): String[1]
{
   let partitionBy = if($windowSpec.partition->isEmpty(), 
                     '', 
                     'PARTITION BY ' + $windowSpec.partition->joinStrings(', '));
   
   let orderBy = if($windowSpec.sortInfo->isEmpty(), 
                 '', 
                 if($partitionBy->isEmpty(), '', ' ') + 
                 'ORDER BY ' + $windowSpec.sortInfo->map(s | $s.column + 
                     if($s.direction == meta::pure::dsl::dataframe::metamodel::window::SortDirection.ASC, '', ' DESC'))->joinStrings(', '));
   
   let frame = if($windowSpec.frame->isEmpty(), 
               '', 
               if($partitionBy->isEmpty() && $orderBy->isEmpty(), '', ' ') + 
               generateFrameSQL($windowSpec.frame->toOne()));
   
   $partitionBy + $orderBy + $frame;
}

function meta::pure::dsl::snowflake::generateFrameSQL(frame: Frame[1]): String[1]
{
   let frameType = if($frame->instanceOf(Rows), 'ROWS', 'RANGE');
   
   let start = generateFrameValueSQL($frame.offsetFrom);
   let end = generateFrameValueSQL($frame.offsetTo);
   
   $frameType + ' BETWEEN ' + $start + ' AND ' + $end;
}

function meta::pure::dsl::snowflake::generateFrameValueSQL(frameValue: FrameValue[1]): String[1]
{
   if($frameValue->instanceOf(UnboundedFrameValue),
      | 'UNBOUNDED PRECEDING',
      | if($frameValue->instanceOf(FrameIntValue),
           | let value = $frameValue->cast(@FrameIntValue).value;
             if($value == 0,
                | 'CURRENT ROW',
                | if($value > 0,
                     | $value->toString() + ' FOLLOWING',
                     | ($value * -1)->toString() + ' PRECEDING'
                  )
             );,
           | 'UNBOUNDED PRECEDING' // Default case
        )
   );
}

// Handle inline TDS in Snowflake SQL generation
function meta::pure::dsl::snowflake::handleInlineTDS(df: DataFrame[1]): String[1]
{
   if($df.source->instanceOf(TableReference) && $df.source->cast(@TableReference).tableName == 'inline_tds',
      |'(SELECT ' + $df.columns->map(c | $c.name)->joinStrings(', ') + ' FROM VALUES ' + $df->getInlineTDSValues() + ')',
      |$df.source->generateFromClause()
   )
}

// Helper function to get inline TDS values
function meta::pure::dsl::snowflake::getInlineTDSValues(df: DataFrame[1]): String[1]
{
   meta::pure::dsl::dataframe::getInlineTDSValues($df);
}
